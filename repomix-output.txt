This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-12T11:54:14.836Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  vite.svg
src/
  assets/
    react.svg
  codemirror/
    codemirror-editor.tsx
  command/
    command-palette.tsx
    command-store.ts
  components/
    ui/
      button.tsx
      command.tsx
      dialog.tsx
      input.tsx
      resizable.tsx
    swc-loader.tsx
  esm-loader/
    import-module.ts
    import-types.ts
  keyboard/
    use-keyboard-nav.ts
  lib/
    query-client.ts
    theme.ts
  notebook/
    components/
      cell-output.tsx
    hooks/
      use-cell-execution.ts
    notebook-store.ts
    notebook.tsx
    render-code-cell.tsx
  runtime/
    context.ts
    dependency-tracker.ts
    find-references.ts
    js-executor.ts
    js-worker.ts
    run-code.ts
    signals.ts
  theme/
    json-view-theme.ts
  transforms/
    single-export-per-codeblock.ts
  utils/
    cn.ts
    format-code.ts
    hash.ts
    types.ts
    use-dark-mode.ts
  index.css
  main.tsx
  vite-env.d.ts
.cursorrules
.gitignore
biome.json
index.html
package.json
playground.ts
README.md
tsconfig.json
vite.config.ts

================================================================
Files
================================================================

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/codemirror/codemirror-editor.tsx
================
import { EditorView } from "@codemirror/view";
import { langs, loadLanguage } from "@uiw/codemirror-extensions-langs";
import { githubDark, githubLight } from "@uiw/codemirror-themes-all";
import CodeMirror, { ReactCodeMirrorProps } from "@uiw/react-codemirror";
import { useEffect, useMemo, useRef } from "react";
import { useDarkMode } from "../utils/use-dark-mode";

loadLanguage("tsx");
langs.tsx();

const calculateEditorHeight = (content: string) => {
  const lineCount = content.split("\n").length;
  const lineHeight = 18; // CodeMirror default line height
  const padding = 12; // CodeMirror default padding
  return Math.max(lineCount * lineHeight + padding, 40); // minimum height of 40px for CodeMirror
};

const basicSetupConfig = {
  foldGutter: false,
  dropCursor: false,
  allowMultipleSelections: false,
  autocompletion: false,
  indentOnInput: false,
  highlightActiveLine: true,
} as const;

export function CodemirrorEditor({
  isFocused,
  ...props
}: ReactCodeMirrorProps & { isFocused?: boolean }) {
  const { theme } = useDarkMode();
  const editorRef = useRef<EditorView | null>(null);
  const editorHeight = useMemo(
    () => `${calculateEditorHeight(props.value ?? "")}px`,
    [props.value],
  );

  const extensions = useMemo(() => [langs.tsx()], []);

  useEffect(() => {
    if (editorRef.current) {
      if (isFocused) {
        editorRef.current.focus();
      }
    }
  }, [isFocused]);

  return (
    <div style={{ height: editorHeight }}>
      <CodeMirror
        height={editorHeight}
        basicSetup={basicSetupConfig}
        theme={theme === "dark" ? githubDark : githubLight}
        extensions={extensions}
        onCreateEditor={(view) => {
          editorRef.current = view;
        }}
        {...props}
      />
    </div>
  );
}

================
File: src/command/command-palette.tsx
================
import { For, observer, use$ } from "@legendapp/state/react";
import { Search, Trash2, Variable } from "lucide-react";
import * as React from "react";
import {
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "../components/ui/command";
import {
  addCell,
  deleteCell,
  notebook$,
  setFocusedCell,
} from "../notebook/notebook-store";
import { command$, commandPalette$ } from "./command-store";

export const CommandPalette = observer(() => {
  const isOpen = use$(commandPalette$.isOpen);
  const focusedCell = use$(notebook$.focusedCellId);

  React.useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === "k" && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        commandPalette$.isOpen.set(true);
      }
    };

    document.addEventListener("keydown", down);
    return () => document.removeEventListener("keydown", down);
  }, []);

  return isOpen ? (
    <CommandDialog
      open={isOpen}
      onOpenChange={(s) => {
        commandPalette$.isOpen.set(s);
      }}
    >
      <CommandInput placeholder="Type a command or search..." />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>
        <CommandGroup heading="Actions">
          <CommandItem
            onSelect={() => {
              addCell("code");
              commandPalette$.isOpen.set(false);
            }}
          >
            <Search className="w-4 h-4 mr-2" />
            New Code Cell
          </CommandItem>

          <CommandItem
            onSelect={() => {
              addCell("text");
              commandPalette$.isOpen.set(false);
            }}
          >
            <Search className="w-4 h-4 mr-2" />
            New Text Cell
          </CommandItem>

          {focusedCell && (
            <CommandItem
              onSelect={() => {
                deleteCell(focusedCell);
                commandPalette$.isOpen.set(false);
              }}
            >
              <Trash2 className="w-4 h-4 mr-2" />
              Delete Cell
            </CommandItem>
          )}
        </CommandGroup>

        <CommandGroup heading="Cells">
          <For each={notebook$.cells}>
            {(cell$, index) => {
              const cell = cell$.get();
              return (
                <CommandItem
                  key={cell.id}
                  onSelect={() => {
                    setFocusedCell(cell.id);
                    commandPalette$.isOpen.set(false);
                  }}
                  className="flex justify-between items-center"
                >
                  <div className="flex items-center">
                    <Search className="w-4 h-4 mr-2" />
                    <span>Focus Cell {index}</span>
                  </div>
                  <span className="text-xs opacity-75 font-mono">
                    {cell.type}
                  </span>
                </CommandItem>
              );
            }}
          </For>
        </CommandGroup>

        <CommandGroup heading="Global Variables">
          <For each={command$.globalVariables}>
            {(cmd) => (
              <CommandItem
                key={cmd.name.get()}
                onSelect={() => {
                  commandPalette$.isOpen.set(false);
                }}
                className="flex justify-between items-center"
              >
                <div className="flex items-center">
                  <Variable className="w-4 h-4 mr-2 text-blue-500" />
                  <span className="font-mono">{cmd.name.get()}</span>
                </div>
                <span className="text-xs opacity-75 text-blue-500 font-mono">
                  global
                </span>
              </CommandItem>
            )}
          </For>
        </CommandGroup>
      </CommandList>
    </CommandDialog>
  ) : null;
});

================
File: src/command/command-store.ts
================
import { observable } from "@legendapp/state";

export interface Command {
  id: string;
  name: string;
  description?: string;
  category: "global" | "cell" | "notebook";
  handler: () => void;
}

interface CommandState {
  commands: Command[];
  searchQuery: string;
  globalVariables: Command[];
}

interface CommandPaletteState {
  isOpen: boolean;
}

type CommandStore = CommandState & {
  unregisterCommand: (id: string) => void;
  setSearchQuery: (query: string) => void;
  filteredCommands: Command[];
};

type CommandPaletteStore = CommandPaletteState & {
  toggle: () => void;
};

export const registerGlobalVariable: (name: string, value: any) => void = (
  name,
  value,
) => {
  command$.commands.push({
    id: `global-${name}`,
    name,
    category: "global",
    handler: () => {
      console.log("global variable", name, value);
    },
  });
};

export const command$ = observable<CommandStore>({
  commands: [],
  searchQuery: "",
  globalVariables: () =>
    command$.commands.filter((cmd) => cmd.category.get() === "global"),

  unregisterCommand: (id) => {
    const index = command$.commands.findIndex((cmd) => cmd.id.peek() === id);
    if (index !== -1) {
      command$.commands.splice(index, 1);
    }
  },

  setSearchQuery: (query) => {
    command$.searchQuery.set(query);
  },

  filteredCommands: () => {
    const query = command$.searchQuery.get().toLowerCase();
    if (!query) return command$.commands;
    const comamnds = command$.commands.get();
    return comamnds.filter(
      (cmd) =>
        cmd.name.toLowerCase().includes(query) ||
        cmd.description?.toLowerCase().includes(query),
    );
  },
});

export const commandPalette$ = observable<CommandPaletteStore>({
  isOpen: false,

  toggle: () => {
    commandPalette$.isOpen.set(!commandPalette$.isOpen);
  },
});

================
File: src/components/ui/button.tsx
================
import { Slot } from "@radix-ui/react-slot";
import { VariantProps, cva } from "class-variance-authority";
import * as React from "react";

import { cn } from "../../utils/cn";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-sm hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-xs hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };

================
File: src/components/ui/command.tsx
================
import * as React from "react";
import { type DialogProps } from "@radix-ui/react-dialog";
import { Command as CommandPrimitive } from "cmdk";
import { Search } from "lucide-react";

import { cn } from "../../utils/cn";
import { Dialog, DialogContent } from "./dialog";

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className,
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg w-[640px]">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[400px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
));

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className,
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-hidden data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className,
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  );
};
CommandShortcut.displayName = "CommandShortcut";

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};

================
File: src/components/ui/dialog.tsx
================
import * as DialogPrimitive from "@radix-ui/react-dialog";
import * as React from "react";

import { cn } from "../../utils/cn";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPrimitive.Portal>
    <DialogPrimitive.Overlay className="fixed inset-0 z-50 bg-black/50" />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 translate-x-[-50%] translate-y-[-50%] rounded-lg border bg-background shadow-lg",
        className,
      )}
      {...props}
    >
      {children}
    </DialogPrimitive.Content>
  </DialogPrimitive.Portal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className,
    )}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight hidden",
      className,
    )}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};

================
File: src/components/ui/input.tsx
================
import * as React from "react";

import { cn } from "../../utils/cn";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-xs transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };

================
File: src/components/ui/resizable.tsx
================
import { GripVertical } from "lucide-react";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "../../utils/cn";

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className,
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className,
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizableHandle, ResizablePanel, ResizablePanelGroup };

================
File: src/components/swc-loader.tsx
================
import { Loader2 } from "lucide-react";
import { cn } from "../utils/cn";

interface LoaderProps extends React.HTMLAttributes<HTMLDivElement> {
  text?: string;
}

export function LoaderScreen({
  text = "Loading...",
  className,
  ...props
}: LoaderProps) {
  return (
    <div
      className={cn(
        "flex min-h-[400px] flex-col items-center justify-center gap-4",
        className,
      )}
      {...props}
    >
      <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
      <p className="text-sm text-muted-foreground">{text}</p>
    </div>
  );
}

interface ErrorScreenProps extends React.HTMLAttributes<HTMLDivElement> {
  error: string;
}

export function ErrorScreen({ error, className, ...props }: ErrorScreenProps) {
  return (
    <div
      className={cn(
        "flex min-h-[400px] flex-col items-center justify-center gap-4 p-4 text-center",
        className,
      )}
      {...props}
    >
      <div className="rounded-full bg-destructive/10 p-3 text-destructive">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
          className="h-6 w-6"
        >
          <path d="M12 8v4M12 16h.01" />
          <path d="M3 12a9 9 0 1 0 18 0 9 9 0 0 0-18 0" />
        </svg>
      </div>
      <div className="max-w-[400px] space-y-2">
        <h3 className="text-lg font-medium">Initialization Error</h3>
        <p className="text-sm text-muted-foreground">{error}</p>
      </div>
    </div>
  );
}

================
File: src/esm-loader/import-module.ts
================
export async function importModule(url: string) {
  try {
    return await import(/* @vite-ignore */ url);
  } catch (error) {
    throw new Error(`Failed to import module: ${url}`);
  }
}

================
File: src/esm-loader/import-types.ts
================
interface ModuleDefinition {
  url: string;
  typesUrl?: string;
}

async function loadTypes(url: string): Promise<string> {
  const response = await fetch(url);
  return response.text();
}

export class TypeRegistry {
  private typeCache = new Map<string, string>();

  async getTypes(moduleName: string): Promise<string> {
    if (this.typeCache.has(moduleName)) {
      return this.typeCache.get(moduleName)!;
    }

    // Try loading from DefinitelyTyped first
    const esmTypesUrl = `https://esm.sh/${moduleName}?types`;
    const types = await loadTypes(esmTypesUrl);
    this.typeCache.set(moduleName, types);
    return types;
  }
}

async function resolveTypedImports(code: string) {
  const typeRegistry = new TypeRegistry();
  const importRegex =
    /import\s+?(?:(?:(?:[\w*\s{},]*)\s+from\s+?)|)(?:(?:".*?")|(?:'.*?'))[\s]*?(?:;|$)/g;
  const imports = code.match(importRegex) || [];

  // Collect all type definitions
  const typePromises = imports.map(async (importStatement) => {
    const moduleNameMatch = importStatement.match(/['"]([^'"]+)['"]/);
    if (!moduleNameMatch) return "";
    return typeRegistry.getTypes(moduleNameMatch[1]);
  });

  const types = await Promise.all(typePromises);
  const combinedTypes = types.join("\n\n");

  // Create virtual TS environment
  const virtualTsCode = `
    ${combinedTypes}
    
    // Your code
    ${code}
  `;

  // Use TypeScript compiler API to check types
  // This is where you'd integrate with the TS compiler
  return virtualTsCode;
}

================
File: src/keyboard/use-keyboard-nav.ts
================
import { use$ } from "@legendapp/state/react";
import React from "react";
import { notebook$, setFocusedCell } from "../notebook/notebook-store";

export function useKeyboardNav() {
  const cells = use$(notebook$.cells);
  const focusedCellId = use$(notebook$.focusedCellId);

  const handleKeyDown = React.useCallback(
    (e: KeyboardEvent) => {
      if (e.key === "ArrowUp" && e.ctrlKey) {
        e.preventDefault();
        const currentIndex = cells.findIndex(
          (cell) => cell.id === focusedCellId,
        );
        if (currentIndex > 0) {
          setFocusedCell(cells[currentIndex - 1].id);
        }
      } else if (e.key === "ArrowDown" && e.ctrlKey) {
        e.preventDefault();
        const currentIndex = cells.findIndex(
          (cell) => cell.id === focusedCellId,
        );
        if (currentIndex < cells.length - 1) {
          setFocusedCell(cells[currentIndex + 1].id);
        }
      }
    },
    [cells, focusedCellId],
  );

  React.useEffect(() => {
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [handleKeyDown]);
}

================
File: src/lib/query-client.ts
================
import { QueryClient } from "@tanstack/react-query";

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      refetchOnWindowFocus: false,
    },
  },
});

================
File: src/lib/theme.ts
================
type Theme = "dark" | "light";

export function setTheme(theme: Theme) {
  if (theme === "dark") {
    document.documentElement.classList.add("dark");
  } else {
    document.documentElement.classList.remove("dark");
  }
  // Only save to localStorage if it's a manual preference
  if (localStorage.getItem("theme")) {
    localStorage.setItem("theme", theme);
  }
}

export function initializeTheme() {
  const savedTheme = localStorage.getItem("theme") as Theme | null;
  const systemPrefersDark = window.matchMedia(
    "(prefers-color-scheme: dark)",
  ).matches;

  if (savedTheme) {
    setTheme(savedTheme);
  } else {
    setTheme(systemPrefersDark ? "dark" : "light");
    // Don't save system preference to localStorage
  }

  // Add listener for system theme changes
  const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
  mediaQuery.addEventListener("change", (e) => {
    // Only update if no saved preference
    if (!localStorage.getItem("theme")) {
      setTheme(e.matches ? "dark" : "light");
    }
  });
}

================
File: src/notebook/components/cell-output.tsx
================
import JsonView from "@uiw/react-json-view";
import { ChevronDown, ChevronRight } from "lucide-react";
import { memo } from "react";
import { jsonViewTheme } from "../../theme/json-view-theme";
import { observer } from "@legendapp/state/react";

interface CollapsibleHeaderProps {
  isOpen: boolean;
  onClick: () => void;
  children: React.ReactNode;
}

const CollapsibleHeader = observer(
  ({ isOpen, onClick, children }: CollapsibleHeaderProps) => (
    <button
      onClick={onClick}
      className="flex items-center gap-1 px-2 py-1 text-xs text-muted-foreground hover:bg-accent/50 w-full text-left border-t border-border"
    >
      {isOpen ? (
        <ChevronDown className="h-3 w-3" />
      ) : (
        <ChevronRight className="h-3 w-3" />
      )}
      {children}
    </button>
  ),
);

const MemoizedJsonView = memo(
  ({ value }: { value: any }) => (
    <JsonView
      value={value}
      displayDataTypes={false}
      collapsed={2}
      displayObjectSize={false}
      enableClipboard={false}
      style={jsonViewTheme}
    />
  ),
  (prevProps, nextProps) => {
    return JSON.stringify(prevProps.value) === JSON.stringify(nextProps.value);
  },
);

interface CellOutputProps {
  output: { logs?: string[]; result?: any };
  showLogs: boolean;
  showOutput: boolean;
  onToggleLogs: () => void;
  onToggleOutput: () => void;
}

export const CellOutput = memo(
  observer(
    ({
      output,
      showLogs,
      showOutput,
      onToggleLogs,
      onToggleOutput,
    }: CellOutputProps) => {
      return (
        <div className="flex flex-col">
          {output.logs && output.logs.length > 0 && (
            <>
              <CollapsibleHeader isOpen={showLogs} onClick={onToggleLogs}>
                Console Output ({output.logs.length} lines)
              </CollapsibleHeader>
              {showLogs && (
                <div className="flex-1 px-2 py-1 font-mono text-xs bg-background text-foreground">
                  {output.logs.map((log: string, i: number) => (
                    <div
                      key={`${i}-${log}`}
                      className="whitespace-pre-wrap opacity-75"
                    >
                      {log}
                    </div>
                  ))}
                </div>
              )}
            </>
          )}

          {output.result !== undefined && output.result !== null && (
            <>
              <CollapsibleHeader isOpen={showOutput} onClick={onToggleOutput}>
                Result
              </CollapsibleHeader>
              {showOutput && (
                <div className="flex-1 p-2 font-mono text-xs bg-background text-foreground">
                  <MemoizedJsonView value={output.result} />
                </div>
              )}
            </>
          )}
        </div>
      );
    },
  ),
);

================
File: src/notebook/hooks/use-cell-execution.ts
================
import { useCallback } from "react";
import { hashCode } from "../../utils/hash";
import {
  addCellLog,
  notebook$,
  updateCell,
  updateCellAnalysis,
} from "../notebook-store";
import { runCode } from "../../runtime/run-code";

export function useCellExecution(cellId: string) {
  return useCallback(
    async (code: string) => {
      try {
        const globals = notebook$.globals.get();
        const newHash = hashCode(code);

        const result = await runCode(code, globals, (message) => {
          addCellLog(cellId, message);
        });

        updateCell(cellId, {
          content: code,
          hash: newHash,
          output: {
            logs: result.logs,
            result: result.result,
          },
          error: null,
        });

        updateCellAnalysis(cellId, {
          exports: result.exports,
          references: result.references.map((r) => ({
            ...r,
            count: r.dependencies,
          })),
        });
      } catch (error) {
        const newHash = hashCode(code);
        updateCell(cellId, {
          content: code,
          hash: newHash,
          error: error instanceof Error ? error.message : String(error),
          output: { logs: [], result: null },
        });
        updateCellAnalysis(cellId, {
          exports: [],
          references: [],
        });
      }
    },
    [cellId],
  );
}

================
File: src/notebook/notebook-store.ts
================
import { batch, observable } from "@legendapp/state";
import { ObservablePersistLocalStorage } from "@legendapp/state/persist-plugins/local-storage";
import { syncObservable } from "@legendapp/state/sync";
import { createId } from "@paralleldrive/cuid2";
import { hashCode } from "../utils/hash";

interface CodeCellOutput {
  logs: string[];
  result: unknown;
}

interface TextCellOutput {
  html: string;
}

interface BaseCell {
  id: string;
  type: "text" | "code";
  content: string;
  error: string | null;
  hash?: string;
  analysis: {
    exports: Array<{
      name: string;
      type: string;
      value: any;
    }>;
    references: Array<{
      name: string;
      count: number;
      sourceCell: string;
    }>;
  };
  showLogs: boolean;
  showOutput: boolean;
}

export interface TextCell extends BaseCell {
  type: "text";
  output: TextCellOutput;
}

export interface CodeCell extends BaseCell {
  type: "code";
  output: CodeCellOutput;
}

export type Cell = TextCell | CodeCell;

function createCell(type: Cell["type"] = "code"): Cell {
  // @ts-ignore
  return {
    id: createId(),
    type,
    content: "",
    error: null,
    output: type === "code" ? { logs: [], result: null } : { html: "" },
    analysis: {
      exports: [],
      references: [],
    },
    showLogs: true,
    showOutput: true,
  };
}

interface NotebookState {
  cells: Cell[];
  focusedCellId: string | null;
  globals: Array<{
    name: string;
    value: any;
    type: string;
    sourceCell: string;
  }>;
}

export const notebook$ = observable<NotebookState>({
  cells: [],
  focusedCellId: null,
  globals: () => {
    const cells = notebook$.cells.get();
    return cells.flatMap(
      (cell) =>
        cell.analysis?.exports?.map((exp) => ({
          name: exp.name,
          value: exp.value,
          type: exp.type,
          sourceCell: cell.id,
        })) ?? [],
    );
  },
});

syncObservable(notebook$, {
  persist: {
    name: "notebook",
    plugin: ObservablePersistLocalStorage,
  },
});

export function setFocusedCell(id: string | null) {
  notebook$.focusedCellId.set(id);
}

export function addCell(belowId?: string) {
  const cell = createCell();
  batch(() => {
    const cells = notebook$.cells.peek();
    const index = belowId ? cells.findIndex((c) => c.id === belowId) : -1;

    if (index === -1) {
      notebook$.cells.push(cell);
    } else {
      notebook$.cells.splice(index + 1, 0, cell);
    }

    setTimeout(() => {
      notebook$.focusedCellId.set(cell.id);
    }, 0);
  });
}

export function deleteCell(id: string) {
  const cells = notebook$.cells.peek();
  const index = cells.findIndex((c) => c.id === id);
  if (index !== -1) {
    notebook$.cells.splice(index, 1);
  }
  if (notebook$.focusedCellId.peek() === id) {
    notebook$.focusedCellId.set(null);
  }
}

export function updateCellContent(id: string, content: string) {
  const cells = notebook$.cells.peek();
  const cell = cells.findIndex((c) => c.id === id);
  if (cell !== -1) {
    notebook$.cells[cell].content.set(content);
    notebook$.cells[cell].error.set(null);
  }
}

export function updateCellOutput(
  id: string,
  output: CodeCellOutput | TextCellOutput,
) {
  const cells = notebook$.cells.peek();
  const cell = cells.findIndex((c) => c.id === id);
  if (cell !== -1) {
    // TODO: fix this
    // @ts-ignore
    notebook$.cells[cell].output.set(output);
    notebook$.cells[cell].error.set(null);
  }
}

export function setCellError(id: string, error: string) {
  const cells = notebook$.cells.peek();
  const cell = cells.findIndex((c) => c.id === id);
  if (cell !== -1) {
    notebook$.cells[cell].error.set(error);
  }
}

export function selectCell(id: string) {
  notebook$.focusedCellId.set(id);
}

export function moveCellUp(id: string) {
  const cells = notebook$.cells.peek();
  const index = cells.findIndex((c) => c.id === id);
  if (index > 0) {
    const [moved] = notebook$.cells.splice(index, 1);
    notebook$.cells.splice(index - 1, 0, moved);
  }
}

export function moveCellDown(id: string) {
  const cells = notebook$.cells.peek();
  const index = cells.findIndex((c) => c.id === id);
  if (index < cells.length - 1) {
    const [moved] = notebook$.cells.splice(index, 1);
    notebook$.cells.splice(index + 1, 0, moved);
  }
}

export function addCellLog(id: string, log: string) {
  const cells = notebook$.cells.peek();
  const cell = cells.findIndex((c) => c.id === id);
  if (cell !== -1) {
    const currentCell = notebook$.cells[cell].peek();
    if (currentCell.type === "code") {
      currentCell.output?.logs.push(log);
    }
  }
}

export function updateCell(id: string, updates: Partial<Cell>) {
  const index = notebook$.cells.peek().findIndex((c) => c.id === id);
  if (index !== -1) {
    const currentCell = notebook$.cells[index].peek();

    if (
      updates.content !== undefined &&
      updates.content !== currentCell.content
    ) {
      updates.hash = hashCode(updates.content);
    }

    if (updates.output) {
      if (currentCell.type === "code" && !isCodeCellOutput(updates.output)) {
        throw new Error("Invalid output type for code cell");
      }
      if (currentCell.type === "text" && !isTextCellOutput(updates.output)) {
        throw new Error("Invalid output type for text cell");
      }
    }

    // TODO: fix this
    // @ts-ignore
    notebook$.cells[index].set({
      ...currentCell,
      ...updates,
    });
  }
}

export function updateCellAnalysis(id: string, analysis: BaseCell["analysis"]) {
  const index = notebook$.cells.peek().findIndex((c) => c.id === id);
  if (index !== -1) {
    if (!notebook$.cells[index].analysis.peek()) {
      notebook$.cells[index].analysis.set({
        exports: [],
        references: [],
      });
    }
    notebook$.cells[index].analysis.set(analysis);
  }
}

export function toggleCellLogs(id: string) {
  const cells = notebook$.cells.get();
  const index = cells.findIndex((c) => c.id === id);
  if (index !== -1) {
    const current = notebook$.cells[index].showLogs.get();
    notebook$.cells[index].showLogs.set(!current);
  }
}

export function toggleCellOutput(id: string) {
  const cells = notebook$.cells.get();
  const index = cells.findIndex((c) => c.id === id);
  if (index !== -1) {
    const current = notebook$.cells[index].showOutput.get();
    notebook$.cells[index].showOutput.set(!current);
  }
}

function isCodeCellOutput(output: any): output is CodeCellOutput {
  return output && Array.isArray(output.logs) && "result" in output;
}

function isTextCellOutput(output: any): output is TextCellOutput {
  return output && typeof output.html === "string";
}

================
File: src/notebook/notebook.tsx
================
import { For, observer, use$ } from "@legendapp/state/react";
import { Variable } from "lucide-react";
import * as React from "react";
import { CommandPalette } from "../command/command-palette";
import { useKeyboardNav } from "../keyboard/use-keyboard-nav";
import { useDarkMode } from "../utils/use-dark-mode";
import { CodeCell, notebook$ } from "./notebook-store";
import { RenderCodeCell } from "./render-code-cell";
import { ResizableHandle } from "../components/ui/resizable";
import { ResizablePanel } from "../components/ui/resizable";
import { ResizablePanelGroup } from "../components/ui/resizable";

const Notebook = React.memo(function Notebook() {
  return (
    <div
      className="h-screen flex flex-col bg-background text-foreground"
      role="main"
      aria-label="Notebook editor"
    >
      <CommandPalette />
      {/* <TopBar /> */}
      <div className="flex-1">
        <ResizablePanelGroup direction="horizontal" className="h-full">
          <ResizablePanel defaultSize={75} minSize={30}>
            <Editor />
          </ResizablePanel>
          <ResizableHandle withHandle />
          <ResizablePanel defaultSize={25} minSize={20}>
            <GlobalsPanel />
          </ResizablePanel>
        </ResizablePanelGroup>
      </div>
      {/* <Editor /> */}
    </div>
  );
});

export { Notebook };

const TopBar = React.memo(function TopBar() {
  const { theme, toggleTheme } = useDarkMode();

  return (
    <div className="flex items-center justify-between px-2 py-1 border-b border-border">
      <button
        onClick={toggleTheme}
        className="px-3 py-1 rounded bg-secondary hover:bg-secondary/80"
      >
        {theme === "dark" ? "🌞" : "🌙"}
      </button>
    </div>
  );
});

const Editor = observer(function Editor() {
  useKeyboardNav();

  return (
    <div
      className="flex flex-col w-full"
      role="list"
      aria-label="Notebook cells"
    >
      <For each={notebook$.cells}>
        {(cell$) => {
          const cellId = cell$.id.get();

          return (
            <div key={cellId} role="listitem">
              {cell$.type.get() === "code" ? (
                <RenderCodeCell
                  cell={cell$.get() as CodeCell}
                  isFocused={notebook$.focusedCellId.get() === cellId}
                />
              ) : null}
            </div>
          );
        }}
      </For>
    </div>
  );
});

const GlobalsPanel = observer(() => {
  const globals = use$(notebook$.globals);
  const cells = use$(notebook$.cells);

  // Calculate total references for each global
  const globalRefs = React.useMemo(() => {
    const refs = new Map<string, number>();

    cells.forEach((cell) => {
      cell?.analysis?.references?.forEach((ref) => {
        if (ref?.name) {
          const current = refs.get(ref.name) || 0;
          refs.set(ref.name, current + (ref.count || 0));
        }
      });
    });

    return refs;
  }, [cells]);

  return (
    <div className="h-full flex flex-col border-l border-border">
      <div className="flex-1 overflow-auto p-2">
        {globals.length === 0 ? (
          <div className="text-xs text-muted-foreground p-2">
            No global variables defined
          </div>
        ) : (
          <div className="space-y-2">
            {globals.map(({ name, value, type, sourceCell }) => (
              <div
                key={`${sourceCell}-${name}`}
                className="flex items-center gap-2 p-2 rounded-md hover:bg-muted"
              >
                <Variable className="w-3 h-3 text-blue-500" />
                <span className="font-mono text-xs">{name}</span>
                <div className="ml-auto flex items-center gap-2">
                  {(globalRefs.get(name) ?? 0) > 0 && (
                    <span className="text-[10px] bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 px-1.5 py-0.5 rounded-full">
                      {globalRefs.get(name)} refs
                    </span>
                  )}
                  <span className="text-[10px] text-muted-foreground">
                    {type}
                  </span>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
});

================
File: src/notebook/render-code-cell.tsx
================
import { observer } from "@legendapp/state/react";
import { Play } from "lucide-react";
import * as React from "react";
import { useRef } from "react";
import { CodemirrorEditor } from "../codemirror/codemirror-editor";
import { CellOutput } from "./components/cell-output";
import { useCellExecution } from "./hooks/use-cell-execution";
import {
  CodeCell,
  notebook$,
  setFocusedCell,
  toggleCellLogs,
  toggleCellOutput,
  updateCell,
} from "./notebook-store";

interface CodeCellProps {
  cell: CodeCell;
  isFocused: boolean;
}

export const RenderCodeCell = observer(({ cell, isFocused }: CodeCellProps) => {
  if (cell.type !== "code") return null;

  const containerRef = useRef<HTMLDivElement>(null);
  const run = useCellExecution(cell.id);

  const handleChange = React.useCallback(
    (value: string | undefined) => {
      updateCell(cell.id, { content: value ?? "" });
    },
    [cell.id],
  );

  const handleFocus = React.useCallback(() => {
    setFocusedCell(cell.id);
  }, [cell.id]);

  const handleKeyDown = React.useCallback(
    (event: React.KeyboardEvent) => {
      if (event.key === "Enter" && event.shiftKey) {
        event.preventDefault();
        run(cell.content);
      }
    },
    [cell.content, run],
  );

  // Instead of getting the values directly from cell, get them from the store
  const cellState = notebook$.cells.find((c) => c.id.get() === cell.id);
  const showLogs = cellState?.showLogs.get() ?? true;
  const showOutput = cellState?.showOutput.get() ?? true;

  return (
    <div
      className="flex px-4 pt-4 gap-2"
      role="region"
      aria-label={`Code cell ${cell.id}`}
    >
      <div
        ref={containerRef}
        className="border border-border rounded-md overflow-hidden flex-1"
        role="textbox"
        aria-label="Code editor"
      >
        <div className="relative">
          <button
            onClick={() => run(cell.content)}
            className="absolute right-2 top-2 p-1 rounded hover:bg-accent/50 text-muted-foreground hover:text-foreground transition-colors z-50"
            title="Run cell (Shift+Enter)"
          >
            <Play className="h-4 w-4" />
          </button>
          <CodemirrorEditor
            isFocused={isFocused}
            value={cell.content}
            onChange={handleChange}
            onFocus={handleFocus}
            onKeyDown={handleKeyDown}
          />
        </div>

        {cell.output && (
          <CellOutput
            output={cell.output}
            showLogs={showLogs}
            showOutput={showOutput}
            onToggleLogs={() => toggleCellLogs(cell.id)}
            onToggleOutput={() => toggleCellOutput(cell.id)}
          />
        )}

        {cell.error && (
          <div
            className="flex-1 p-2 font-mono text-sm bg-red-50 text-red-900 border-t border-red-200"
            role="alert"
          >
            {cell.error}
          </div>
        )}
      </div>
    </div>
  );
});

================
File: src/runtime/context.ts
================
export function createRuntimeContext(context: Record<string, any>) {
  return {
    console,
    setTimeout,
    clearTimeout,
    setInterval,
    clearInterval,
    Math,
    Date,
    JSON,
    String,
    Number,
    Boolean,
    Array,
    Object,
    Error,
    Promise,
    RegExp,
    ...context,
  };
}

const StdLib = {
  fetch,
  sleep: (ms: number) => new Promise((resolve) => setTimeout(resolve, ms)),
  log: (...args: any[]) => console.log(...args),
  error: (...args: any[]) => console.error(...args),
  warn: (...args: any[]) => console.warn(...args),
  info: (...args: any[]) => console.info(...args),
  debug: (...args: any[]) => console.debug(...args),
  trace: (...args: any[]) => console.trace(...args),
  now: () => Date.now(),
  time: (label: string) => console.time(label),
  timeEnd: (label: string) => console.timeEnd(label),
  range: (start: number, end: number) =>
    Array.from({ length: end - start }, (_, i) => start + i),
  shuffle: <T>(array: T[]): T[] => {
    const copy = [...array];
    for (let i = copy.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [copy[i], copy[j]] = [copy[j], copy[i]];
    }
    return copy;
  },

  uuid: () => crypto.randomUUID(),
  base64: {
    encode: (str: string) => btoa(str),
    decode: (str: string) => atob(str),
  },

  random: {
    int: (min: number, max: number) =>
      Math.floor(Math.random() * (max - min + 1)) + min,
    float: (min: number, max: number) => Math.random() * (max - min) + min,
  },
};

export const runtimeContext = createRuntimeContext(StdLib);

================
File: src/runtime/dependency-tracker.ts
================
import type { PluginObj } from "@babel/core";

export function trackDependencies(
  globalReactiveVariables: Set<string>,
  dependencies: Map<string, number>,
) {
  return (): PluginObj => {
    return {
      visitor: {
        Program: {
          enter(path) {
            // Track exported variables from return statements
            const exportedVars = new Set<string>();

            path.traverse({
              ReturnStatement(path) {
                const argument = path.node.argument;
                if (argument && argument.type === "ObjectExpression") {
                  // Extract keys from object literal return statement
                  argument.properties.forEach((prop) => {
                    if (
                      prop.type === "ObjectProperty" &&
                      prop.key.type === "Identifier"
                    ) {
                      exportedVars.add(prop.key.name);
                    }
                  });
                }
              },
            });

            // Track usage of global reactive variables
            path.traverse({
              Identifier(path) {
                const name = path.node.name;
                if (
                  globalReactiveVariables.has(name) &&
                  !exportedVars.has(name)
                ) {
                  // Don't track the variable if it's being declared
                  const binding = path.scope.getBinding(name);
                  if (!binding || binding.scope.block !== path.scope.block) {
                    const currentDependencies = dependencies.get(name) || 0;
                    dependencies.set(name, currentDependencies + 1);
                  }
                }
              },
            });
          },
          exit() {
            return { dependencies };
          },
        },
      },
    };
  };
}

================
File: src/runtime/find-references.ts
================
// @ts-ignore
import * as babel from "@babel/standalone";
import { trackDependencies } from "./dependency-tracker";

export async function findReferences(
  code: string,
  globals: Set<string>,
  cellId: string,
) {
  const dependencies = new Map<string, number>();

  const _code = `(async function() {
    ${code}
  })()`;

  await babel.transform(_code, {
    filename: `cell-${cellId}.ts`,
    plugins: [trackDependencies(globals, dependencies)],
    presets: ["typescript"],
    parserOpts: {
      plugins: ["typescript", "jsx"],
    },
  });

  return Array.from(dependencies.entries()).map(([name, dependencies]) => ({
    name,
    dependencies,
    sourceCell: cellId,
  }));
}

================
File: src/runtime/js-executor.ts
================
import type { WorkerResponse } from "./js-worker";

interface ExecutionResult {
  result: unknown;
  logs: string[];
}

interface ExecutionError {
  error: string;
  logs: string[];
}

type JavascriptExecutorParams = {
  onLog: (log: string) => void;
};

export class JavaScriptExecutor {
  private onLog: (log: string) => void;
  private worker: Worker | null = null;
  private executionMap = new Map<
    string,
    {
      resolve: (value: ExecutionResult) => void;
      reject: (reason: ExecutionError) => void;
      timeout: number;
      logs: string[];
    }
  >();

  constructor(params: JavascriptExecutorParams) {
    this.initializeWorker();
    this.onLog = params.onLog;
  }

  private initializeWorker() {
    if (this.worker) {
      this.worker.terminate();
    }

    this.worker = new Worker(new URL("./js-worker.ts", import.meta.url), {
      type: "module",
    });

    this.worker.onmessage = this.handleWorkerMessage.bind(this);
    this.worker.onerror = this.handleWorkerError.bind(this);
  }

  private handleWorkerMessage(event: MessageEvent<WorkerResponse>) {
    const { id, type, success, result, error, log } = event.data;
    const execution = this.executionMap.get(id);

    if (!execution) return;

    switch (type) {
      case "log":
        if (log) {
          execution.logs.push(log);
          this.onLog(log);
          console.log(log);
        }
        break;

      case "result":
        clearTimeout(execution.timeout);
        this.executionMap.delete(id);
        execution.resolve({
          result,
          logs: execution.logs,
        });
        break;

      case "error":
        clearTimeout(execution.timeout);
        this.executionMap.delete(id);
        console.error(error);
        execution.reject({
          error: error ?? "Unknown error",
          logs: execution.logs,
        });
        break;
    }
  }

  private handleWorkerError(error: ErrorEvent) {
    console.error("Worker error:", error);
    // Reinitialize worker on error
    this.initializeWorker();
  }

  async execute(
    code: string,
    globals: Array<{ name: string; value: any }> = [],
    timeoutMs = 100000,
  ): Promise<ExecutionResult> {
    if (!this.worker) {
      this.initializeWorker();
    }

    return new Promise((resolve, reject) => {
      const id = Math.random().toString(36).slice(2);

      const timeout = window.setTimeout(() => {
        this.executionMap.delete(id);
        this.initializeWorker(); // Recreate worker on timeout
        reject({
          error: "Execution timed out after " + timeoutMs + "ms",
          logs: [],
        });
      }, timeoutMs);

      this.executionMap.set(id, {
        resolve,
        reject,
        timeout,
        logs: [],
      });

      this.worker!.postMessage({ id, code, globals });
    });
  }

  terminate() {
    this.worker?.terminate();
    this.worker = null;
    this.clearPendingExecutions("Executor terminated");
  }

  private clearPendingExecutions(error: string) {
    for (const [id, execution] of this.executionMap) {
      clearTimeout(execution.timeout);
      execution.reject({ error, logs: [] });
      this.executionMap.delete(id);
    }
  }
}

================
File: src/runtime/js-worker.ts
================
import { runtimeContext } from "./context";

export interface WorkerMessage {
  id: string;
  code: string;
  globals: Array<{ name: string; value: any }>;
}

export interface WorkerResponse {
  id: string;
  type: "log" | "result" | "error";
  success?: boolean;
  result?: any;
  error?: string;
  log?: string;
  logs?: string[];
}

export type ContextType = typeof runtimeContext;

function wrapCode(code: string, globals: Array<{ name: string; value: any }>) {
  return `
      return (async () => {
        try {
          ${globals
            .map(
              ({ name, value }) => `const ${name} = ${JSON.stringify(value)};`,
            )
            .join("\n")}

          let __lastExpressionResult;
          __lastExpressionResult = await (async () => {
            ${code}
          })();

          return __lastExpressionResult;
        } catch (err) {
          throw err;
        }
      })();
    `;
}

self.onmessage = async (e: MessageEvent<WorkerMessage>) => {
  const { id, code, globals } = e.data;
  const logs: string[] = [];

  const originalLog = console.log;
  const originalError = console.error;

  console.log = (...args: any[]) => {
    const log = args
      .map((arg) => {
        if (arg instanceof Error) {
          return `${arg.name}: ${arg.message}\n${arg.stack}`;
        }
        return JSON.stringify(arg);
      })
      .join(" ");

    self.postMessage({
      id,
      type: "log",
      log,
    } as WorkerResponse);

    originalLog.apply(console, args);
  };

  console.error = (...args: any[]) => {
    console.log(...args);
    originalError.apply(console, args);
  };

  try {
    const wrappedCode = wrapCode(code, globals);

    const fn = new Function(...Object.keys(runtimeContext), wrappedCode);
    const result = await fn(...Object.values(runtimeContext));

    self.postMessage({
      id,
      type: "result",
      success: true,
      result,
      logs,
    } as WorkerResponse);
  } catch (error) {
    const errorMessage =
      error instanceof Error
        ? `${error.name}: ${error.message}\n${error.stack}`
        : String(error);

    self.postMessage({
      id,
      type: "error",
      success: false,
      error: errorMessage,
      logs,
    } as WorkerResponse);
  } finally {
    console.log = originalLog;
    console.error = originalError;
  }
};

================
File: src/runtime/run-code.ts
================
import { JavaScriptExecutor } from "./js-executor";
import { findReferences } from "./find-references";

export async function runCode(
  code: string,
  globals: Array<{ name: string; value: any }>,
  onLog: (log: string) => void,
) {
  const executor = new JavaScriptExecutor({ onLog });

  const result = await executor.execute(code, globals);
  const references =
    (await findReferences(code, new Set(globals.map((g) => g.name)), "")) || [];

  const exports =
    result.result && typeof result.result === "object"
      ? Object.entries(result.result).map(([name, value]) => ({
          name,
          value,
          type: typeof value,
        }))
      : [];

  return {
    result: result.result,
    logs: result.logs,
    exports,
    references,
  };
}

================
File: src/runtime/signals.ts
================
type Subscriber<T> = (value: T) => void;

export class Signal<T> {
  private subscribers: Array<Subscriber<T>> = [];

  constructor(private value: T) {}

  subscribe(subscriber: Subscriber<T>) {
    this.subscribers.push(subscriber);

    return () => {
      this.subscribers = this.subscribers.filter((sub) => sub !== subscriber);
    };
  }

  get() {
    return this.value;
  }

  set(update: T | ((prevValue: T) => T)) {
    let newValue = update instanceof Function ? update(this.value) : update;
    for (const subscriber of this.subscribers) {
      subscriber(newValue);
    }
  }
}

================
File: src/theme/json-view-theme.ts
================
import { CSSProperties } from "react";

export const jsonViewTheme: CSSProperties & { [key: string]: string } = {
  "--w-rjv-color": "hsl(var(--foreground))", // Default text
  "--w-rjv-key-number": "hsl(var(--primary))", // Primary color
  "--w-rjv-key-string": "hsl(var(--primary))", // Primary color
  "--w-rjv-line-color": "hsl(var(--border))", // Border color
  "--w-rjv-arrow-color": "hsl(var(--muted-foreground))", // Muted text
  "--w-rjv-edit-color": "var(--w-rjv-color)",
  "--w-rjv-info-color": "hsl(var(--muted-foreground))", // Muted text
  "--w-rjv-update-color": "hsl(var(--primary))", // Primary color
  "--w-rjv-copied-color": "hsl(var(--primary))", // Primary color
  "--w-rjv-copied-success-color": "hsl(var(--primary))", // Primary color

  "--w-rjv-curlybraces-color": "hsl(var(--foreground))", // Default text
  "--w-rjv-colon-color": "hsl(var(--foreground))", // Default text
  "--w-rjv-brackets-color": "hsl(var(--foreground))", // Default text
  "--w-rjv-ellipsis-color": "hsl(var(--muted-foreground))", // Muted text
  "--w-rjv-quotes-color": "var(--w-rjv-key-string)",
  "--w-rjv-quotes-string-color": "var(--w-rjv-type-string-color)",

  "--w-rjv-type-string-color": "hsl(var(--primary))", // Primary color
  "--w-rjv-type-int-color": "hsl(var(--primary))", // Primary color
  "--w-rjv-type-float-color": "hsl(var(--primary))", // Primary color
  "--w-rjv-type-bigint-color": "hsl(var(--primary))", // Primary color
  "--w-rjv-type-boolean-color": "hsl(var(--primary))", // Primary color
  "--w-rjv-type-date-color": "hsl(var(--primary))", // Primary color
  "--w-rjv-type-url-color": "hsl(var(--primary))", // Primary color
  "--w-rjv-type-null-color": "hsl(var(--muted-foreground))", // Muted text
  "--w-rjv-type-nan-color": "hsl(var(--destructive))", // Destructive color
  "--w-rjv-type-undefined-color": "hsl(var(--muted-foreground))", // Muted text
} as const;

================
File: src/transforms/single-export-per-codeblock.ts
================
// https://claude.ai/chat/d2fed5f8-b230-4c92-ae39-b8f342d0f5b8

================
File: src/utils/cn.ts
================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================
File: src/utils/format-code.ts
================
import prettier from "prettier/standalone";
import parserTypeScript from "prettier/parser-typescript";
import parserBabel from "prettier/parser-babel";

export async function formatCode(
  code: string,
  parser: "typescript" | "babel" = "typescript",
) {
  try {
    const formatted = await prettier.format(code, {
      parser,
      plugins: [parserTypeScript, parserBabel],
      semi: true,
      singleQuote: false,
      trailingComma: "all",
      printWidth: 80,
      tabWidth: 2,
    });

    return formatted.trim();
  } catch (error) {
    console.warn("Failed to format code:", error);
    return code; // Return original code if formatting fails
  }
}

================
File: src/utils/hash.ts
================
// djb2 algorithm
export function hashCode(code: string): string {
  let hash = 5381;
  for (let i = 0; i < code.length; i++) {
    hash = (hash << 5) + hash + code.charCodeAt(i);
    hash = hash >>> 0;
  }
  return hash.toString(36);
}

================
File: src/utils/types.ts
================
type Matchable = { type: string };

type UnionToTuple<T, Acc extends any[] = []> = [T] extends [never]
  ? Acc
  : T extends any
    ? UnionToTuple<Exclude<T, T>, [T, ...Acc]>
    : never;

type IsExhaustive<
  T extends Matchable,
  R extends Partial<Record<T["type"], any>>,
> = UnionToTuple<T["type"]> extends (keyof R)[] ? true : false;

type Exhaustive<T extends Matchable, Output> = {
  [k in T["type"]]: (props: Extract<T, { type: k }>) => Output;
};

================
File: src/utils/use-dark-mode.ts
================
import { useState, useEffect } from "react";
import { setTheme as setThemeGlobal } from "../lib/theme";

export type Theme = "light" | "dark";

export function useDarkMode() {
  const [theme, setThemeState] = useState<Theme>(() => {
    // Check for saved theme first
    const savedTheme = localStorage.getItem("theme") as Theme | null;
    if (savedTheme) return savedTheme;

    // Otherwise use system preference
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  });

  // Apply theme changes
  useEffect(() => {
    if (theme === "dark") {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  }, [theme]);

  const toggleTheme = () => {
    const newTheme = theme === "dark" ? "light" : "dark";
    setThemeState(newTheme);
    setThemeGlobal(newTheme);
    // Save to localStorage since this is a manual preference
    localStorage.setItem("theme", newTheme);
  };

  // Sync with system changes if no saved preference
  useEffect(() => {
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");

    const handleChange = (e: MediaQueryListEvent) => {
      if (!localStorage.getItem("theme")) {
        const newTheme = e.matches ? "dark" : "light";
        setThemeState(newTheme);
        setThemeGlobal(newTheme);
      }
    };

    mediaQuery.addEventListener("change", handleChange);
    return () => mediaQuery.removeEventListener("change", handleChange);
  }, []);

  return { theme, toggleTheme };
}

================
File: src/index.css
================
@import 'tailwindcss';
@plugin 'tailwindcss-animate';

@custom-variant dark (&:is(.dark *));

@theme {
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));

  --color-chart-1: hsl(var(--chart-1));
  --color-chart-2: hsl(var(--chart-2));
  --color-chart-3: hsl(var(--chart-3));
  --color-chart-4: hsl(var(--chart-4));
  --color-chart-5: hsl(var(--chart-5));

  --color-sidebar: hsl(var(--sidebar-background));
  --color-sidebar-foreground: hsl(var(--sidebar-foreground));
  --color-sidebar-primary: hsl(var(--sidebar-primary));
  --color-sidebar-primary-foreground: hsl(var(--sidebar-primary-foreground));
  --color-sidebar-accent: hsl(var(--sidebar-accent));
  --color-sidebar-accent-foreground: hsl(var(--sidebar-accent-foreground));
  --color-sidebar-border: hsl(var(--sidebar-border));
  --color-sidebar-ring: hsl(var(--sidebar-ring));

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);

  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;

  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }
  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

@layer utilities {
  body {
    font-family: Arial, Helvetica, sans-serif;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/main.tsx
================
import { QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./index.css";
import { queryClient } from "./lib/query-client";
import { initializeTheme } from "./lib/theme";
import { Notebook } from "./notebook/notebook";

initializeTheme();

function App() {
  return <Notebook />;
}

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <QueryClientProvider client={queryClient}>
      <App />
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  </StrictMode>,
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .cursorrules
================
Saturn is a Jupyter-like interactive notebook environment for TypeScript, featuring:

* Reactive notebook cells for real-time code execution
* Modern web interface built with React
* Monaco Editor for a powerful code editing experience
* State management powered by Legend App State
* Clean, responsive design using Tailwind CSS

// we need to make sure that only one export per code block is possible

// INSTRUCTION SET FOR BUILDING REACT CODE RUNNER

/*
KEY COMPONENTS NEEDED:

1. Core Module Resolution System
2. Type System Integration 
3. Code Transformation Pipeline
4. Execution Environment
5. Error Handling
*/

// 1. Module Resolution
interface ModuleCache {
  [key: string]: any; 
}

class ModuleResolver {
  private cache: ModuleCache = {}; 

  async resolveModule(specifier: string): Promise<any> {

    if (this.cache[specifier]) return this.cache[specifier];
    
    const esmUrl = `https://esm.sh/${specifier}` ;
    try {
      const module = await import(/* @vite-ignore */ esmUrl);
      this.cache[specifier] = module;
      return module;
    } catch (error) {
      throw new Error( `Failed to load module: ${specifier}` );
    }

  }
}

// 2. Type System 
interface TypeRegistry {
  [key: string]: string; 
}

class TypeLoader {
  private typeCache: TypeRegistry = {}; 

  async loadTypes(module: string): Promise<string> {

    if (this.typeCache[module]) return this.typeCache[module];

    try {
      // Try DefinitelyTyped first
      const dtUrl = `https://cdn.jsdelivr.net/npm/@types/${module}/index.d.ts` ;
      const res = await fetch(dtUrl);
      if (res.ok) {
        const types = await res.text();
        this.typeCache[module] = types;
        return types;
      }

      // Fallback to esm.sh types
      const esmTypesUrl = `https://esm.sh/${module}?types` ;
      const esmRes = await fetch(esmTypesUrl);
      const types = await esmRes.text();
      this.typeCache[module] = types;
      return types;
    } catch (error) {
      throw new Error( `Failed to load types for ${module}` );
    }

  }
}

// 3. Code Transform Pipeline
interface TransformOptions {
  typescript?: boolean; 
  jsx?: boolean; 
}

class CodeTransformer {
  transform(code: string, options: TransformOptions = {}) {

    // Use Sucrase for transformation
    return transform(code, {
      transforms: [
        ...(options.typescript ? ['typescript'] : []),
        ...(options.jsx ? ['jsx'] : []),
        'imports'
      ],
      production: true
    }).code;

  }
}

// 4. Execution Environment
class CodeRunner {
  private moduleResolver: ModuleResolver; 
  private typeLoader: TypeLoader; 
  private transformer: CodeTransformer; 

  constructor() {

    this.moduleResolver = new ModuleResolver();
    this.typeLoader = new TypeLoader();
    this.transformer = new CodeTransformer();

  }

  async execute(code: string, scope = {}) {

    // 1. Extract imports
    const imports = this.extractImports(code);
    
    // 2. Load modules
    const modules = await Promise.all(
      imports.map(imp => this.moduleResolver.resolveModule(imp))
    );

    // 3. Transform code
    const transformed = this.transformer.transform(code, {
      typescript: true,
      jsx: true
    });

    // 4. Execute with scope
    const fn = new Function(...Object.keys(scope), transformed);
    return fn(...Object.values(scope));

  }

  private extractImports(code: string): string[] {

    const importRegex = /import\s+?(?:(?:(?:[\w*\s{},]*)\s+from\s+?)|)(?:(?:".*?")|(?:'.*?'))[\s]*?(?:;|$)/g;
    const matches = code.match(importRegex) || [];
    return matches.map(imp => {
      const [_, module] = imp.match(/['"]([^'"]+)['"]/) || [];
      return module;
    }).filter(Boolean);

  }
}

// USAGE EXAMPLE:

const runner = new CodeRunner(); 

const code = `
import React from 'react'; 
import Select from 'react-select'; 

export default function Demo() {
  const [value, setValue] = React.useState(null); 
  
  return (

    <Select
      value={value}
      onChange={setValue}
      options={[
        { value: 'chocolate', label: 'Chocolate' },
        { value: 'strawberry', label: 'Strawberry' },
        { value: 'vanilla', label: 'Vanilla' }
      ]}
    />

  ); 
}
`; 

// Execute with React in scope
runner.execute(code, { React }).then(result => {
  console.log('Execution complete:', result); 
}).catch(error => {
  console.error('Execution failed:', error); 
}); 


This is how you use for loops with legend store:
import { useEffect, useRef, useState } from "react"
import { For, observer, useObservable } from "@legendapp/state/react"

let total = 0
const TodosExample = () => {
  const renderCount = ++useRef(0).current
  const todos$ = useObservable([])

  const onClickAdd = () => (
    todos$.push({ id: ++total, text: total + '. Item', renders: 1 })
  )
  const onClickUpdate = () => {
    todos$[todos$.length - 1].text.set((t) => t + '!')
  }

  return (
    <Box>
      <Button onClick={onClickAdd}>
        Add
      </Button>
      <Button onClick={onClickUpdate}>
        Update Latest
      </Button>
      <div>Renders: {renderCount}</div>
      <div className="messages">
        <div className="hint">(text) - (renders)</div>
        <For each={todos$}>
          {(item) => {
            useEffect(() => {
              item.renders.set((r) => r + 1)
            })
            return (
              <div>
                {item.text.get()} - {item.renders.peek()}
              </div>
            )
          }}
        </For>
      </div>
    </Box>
  )
}

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Million Lint
.million

================
File: biome.json
================
{
  "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
  "vcs": {
    "enabled": false,
    "clientKind": "git",
    "useIgnoreFile": false
  },
  "files": {
    "ignoreUnknown": false,
    "ignore": []
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "space"
  },
  "organizeImports": {
    "enabled": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": false
    }
  },
  "javascript": {}
}

================
File: index.html
================
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image/svg+xml" href="/vite.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Vite + React + TS</title>
</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.tsx"></script>
</body>

</html>

================
File: package.json
================
{
  "name": "saturn-ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "biome check --write .",
    "preview": "vite preview",
    "typecheck": "tsc --noEmit --incremental"
  },
  "dependencies": {
    "@babel/core": "^7.26.8",
    "@babel/standalone": "^7.26.8",
    "@codemirror/lang-javascript": "^6.2.2",
    "@legendapp/state": "^3.0.0-beta.26",
    "@locker/near-membrane-dom": "^0.14.0",
    "@million/lint": "^1.0.14",
    "@paralleldrive/cuid2": "^2.2.2",
    "@radix-ui/react-dialog": "^1.1.6",
    "@tanstack/react-query": "^5.66.0",
    "@tanstack/react-query-devtools": "^5.66.0",
    "@uiw/codemirror-extensions-langs": "^4.23.8",
    "@uiw/codemirror-themes-all": "^4.23.8",
    "@uiw/react-codemirror": "^4.23.8",
    "@uiw/react-json-view": "^2.0.0-alpha.30",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.4",
    "idb-keyval": "^6.2.1",
    "immer": "^10.1.1",
    "lucide-react": "^0.474.0",
    "prettier": "^3.5.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-inspector": "^6.0.2",
    "react-resizable-panels": "^2.1.7",
    "react-scan": "^0.1.3",
    "sucrase": "^3.35.0",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "ts-blank-space": "^0.5.1",
    "ts-pattern": "^5.6.2"
  },
  "devDependencies": {
    "@biomejs/biome": "^1.9.4",
    "@tailwindcss/vite": "^4.0.3",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "@vitejs/plugin-react": "^4.3.4",
    "globals": "^15.14.0",
    "tailwindcss": "^4.0.3",
    "typescript": "~5.7.2",
    "vite": "^6.1.0"
  }
}

================
File: playground.ts
================
import * as babel from "@babel/core";
import { trackDependencies } from "./src/runtime/dependency-tracker";

const code = `
  const doubled = count * 2;
  const something = rip * 2

  function display() {
    console.log(doubled);
    console.log(something);
    console.log(count);
  }
`;

const reactiveVariables = new Set<string>(["count", "rip"]);
const dependencies = new Map<string, number>();

const transformedCode = await babel.transformAsync(code, {
  plugins: [trackDependencies(reactiveVariables, dependencies)],
});

console.log(dependencies);

================
File: README.md
================
we might need this, but probably not 
https://www.npmjs.com/package/ts-blank-space

react runner
https://claude.ai/chat/5f1c6382-f4ef-4cbb-9130-f2e9303ee79f

https://uiwjs.github.io/react-codemirror/#/extensions/languages

use sucrase instead of babel

// sucrase: one export per code block
https://claude.ai/chat/d2fed5f8-b230-4c92-ae39-b8f342d0f5b8



# Cell & Reactivity System Design

## Cell Structure:
All cells are regular code cells (no distinct reactive/non-reactive types)
Cells without $() calls are treated as regular code with global injection
Cells with $() calls participate in the reactivity system


## Reactivity Implementation:
Use $() function for both signals and computed values
$(value) creates a signal
$(() => expression) creates a computed value
No special syntax/keywords to maintain TypeScript compatibility


## Output System:
Each cell has an output section below it
log() function to display values:

Regular values print once
Signal values automatically update output when changed

## Example Usage:
typescriptCopy// Regular cell
const x = 123
log(x)

// Reactive cell
const count = $(0)
const doubled = $(count * 2)
log(doubled)
This design prioritizes simplicity and TypeScript compatibility while maintaining an interactive notebook experience.

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",
    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: vite.config.ts
================
import tailwindcss from "@tailwindcss/vite";
import react from "@vitejs/plugin-react";
import { defineConfig } from "vite";

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  worker: {
    format: "es",
  },
  server: {
    headers: {
      "Cross-Origin-Embedder-Policy": "require-corp",
      "Cross-Origin-Opener-Policy": "same-origin",
    },
    hmr: {
      overlay: false,
    },
    watch: {
      usePolling: false,
    },
  },
  optimizeDeps: {
    exclude: ["quickjs-emscripten"],
  },
  build: {
    target: "esnext",
    minify: "esbuild",
  },
});
