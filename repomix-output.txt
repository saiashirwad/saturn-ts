This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-07T18:52:36.877Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  vite.svg
src/
  assets/
    react.svg
  codemirror/
    codemirror-editor.tsx
  command/
    command-palette.tsx
    command-store.ts
  components/
    ui/
      button.tsx
      command.tsx
      dialog.tsx
      input.tsx
      resizable.tsx
  esm-loader/
    import-module.ts
    import-types.ts
  keyboard/
    use-keyboard-nav.ts
  lib/
    theme.ts
  notebook/
    code-cell.tsx
    notebook-store.ts
    notebook.tsx
  runtime/
    js-executor.ts
    js-worker.ts
  utils/
    cn.ts
    useDarkMode.ts
  App.tsx
  example.ts
  index.css
  main.tsx
  quickjs.ts
  vite-env.d.ts
.cursorrules
.gitignore
biome.json
index.html
package.json
README.md
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/codemirror/codemirror-editor.tsx
================
import { EditorView } from "@codemirror/view"
import { langs, loadLanguage } from "@uiw/codemirror-extensions-langs"
import { githubLight, tokyoNight } from "@uiw/codemirror-themes-all"
import CodeMirror from "@uiw/react-codemirror"
import { editor } from "monaco-editor"
import { useEffect, useMemo, useRef } from "react"
import { setFocusedCell } from "../notebook/notebook-store"
import { useDarkMode } from "../utils/useDarkMode"

loadLanguage("tsx")
langs.tsx()

const calculateEditorHeight = (content: string) => {
  const lineCount = content.split("\n").length
  const lineHeight = 18 // CodeMirror default line height
  const padding = 12 // CodeMirror default padding
  return Math.max(lineCount * lineHeight + padding, 40) // minimum height of 40px for CodeMirror
}

export function CodemirrorEditor(props: {
  id: string
  language: string
  value: string
  onChange: (value: string | undefined) => void
  onMount?: (editor: editor.IStandaloneCodeEditor) => void
  isFocused?: boolean
}) {
  const { theme } = useDarkMode()
  const editorRef = useRef<EditorView | null>(null)

  const editorHeight = useMemo(
    () => `${calculateEditorHeight(props.value)}px`,
    [props.value],
  )

  useEffect(() => {
    if (editorRef.current) {
      if (props.isFocused) {
        editorRef.current.focus()
      }
    }
  }, [props.isFocused])

  return (
    <div style={{ height: editorHeight }}>
      <CodeMirror
        value={props.value}
        height={editorHeight}
        onChange={props.onChange}
        basicSetup={{
          foldGutter: false,
          dropCursor: false,
          allowMultipleSelections: false,
          autocompletion: false,
          indentOnInput: false,
          highlightActiveLine: true,
        }}
        theme={theme === "dark" ? tokyoNight : githubLight}
        extensions={[langs.tsx()]}
        onCreateEditor={(view) => {
          editorRef.current = view
        }}
        onFocus={() => {
          setFocusedCell(props.id)
        }}
      />
    </div>
  )
}

================
File: src/command/command-palette.tsx
================
import { use$ } from "@legendapp/state/react"
import { Search, Variable } from "lucide-react"
import * as React from "react"
import {
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "../components/ui/command"
import { addCell, notebook$, setFocusedCell } from "../notebook/notebook-store"
import { command$, commandPalette$ } from "./command-store"

export function CommandPalette() {
  const isOpen = use$(commandPalette$.isOpen)
  const cells = use$(notebook$.cells)
  const globalVariables = use$(command$.commands)

  const globals = React.useMemo(() => {
    return Object.fromEntries(
      globalVariables
        .filter((cmd) => cmd.category === "global")
        .map((cmd) => [cmd.name, cmd.handler]),
    )
  }, [globalVariables])

  React.useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === "k" && (e.metaKey || e.ctrlKey)) {
        e.preventDefault()
        commandPalette$.isOpen.set(true)
      }
    }

    document.addEventListener("keydown", down)
    return () => document.removeEventListener("keydown", down)
  }, [])

  return isOpen ? (
    <CommandDialog
      open={isOpen}
      onOpenChange={(s) => {
        commandPalette$.isOpen.set(s)
      }}
    >
      <CommandInput placeholder="Type a command or search..." />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>
        <CommandGroup heading="Actions">
          <CommandItem
            onSelect={() => {
              addCell("code")
              commandPalette$.isOpen.set(false)
            }}
          >
            <Search className="w-4 h-4 mr-2" />
            Add Code Cell
          </CommandItem>
        </CommandGroup>

        <CommandGroup heading="Cells">
          {cells.map((cell, index) => (
            <CommandItem
              key={cell.id}
              onSelect={() => {
                setFocusedCell(cell.id)
                commandPalette$.isOpen.set(false)
              }}
              className="flex justify-between items-center"
            >
              <div className="flex items-center">
                <Search className="w-4 h-4 mr-2" />
                <span>Focus Cell {index + 1}</span>
              </div>
              <span className="text-xs opacity-75 font-mono">{cell.type}</span>
            </CommandItem>
          ))}
        </CommandGroup>

        <CommandGroup heading="Global Variables">
          {Object.entries(globals).map(([name, _]) => (
            <CommandItem
              key={name}
              onSelect={() => {
                // Could add action here if needed
                commandPalette$.isOpen.set(false)
              }}
              className="flex justify-between items-center"
            >
              <div className="flex items-center">
                <Variable className="w-4 h-4 mr-2 text-blue-500" />
                <span className="font-mono">{name}</span>
              </div>
              <span className="text-xs opacity-75 text-blue-500 font-mono">
                global
              </span>
            </CommandItem>
          ))}
        </CommandGroup>
      </CommandList>
    </CommandDialog>
  ) : null
}

================
File: src/command/command-store.ts
================
import { observable } from "@legendapp/state"

export interface Command {
  id: string
  name: string
  description?: string
  category: "global" | "cell" | "notebook"
  handler: () => void
}

interface CommandState {
  commands: Command[]
  searchQuery: string
}

interface CommandPaletteState {
  isOpen: boolean
}

type CommandStore = CommandState & {
  unregisterCommand: (id: string) => void
  setSearchQuery: (query: string) => void
  filteredCommands: Command[]
}

type CommandPaletteStore = CommandPaletteState & {
  toggle: () => void
}

export function registerGlobalVariable(name: string, value: any) {
  command$.commands.push({
    id: `global-${name}`,
    name,
    category: "global",
    handler: () => {
      console.log("global variable", name, value)
    },
  })
}

export const command$ = observable<CommandStore>({
  commands: [],
  searchQuery: "",

  unregisterCommand: (id) => {
    const index = command$.commands.findIndex((cmd) => cmd.id.peek() === id)
    if (index !== -1) {
      command$.commands.splice(index, 1)
    }
  },

  setSearchQuery: (query) => {
    command$.searchQuery.set(query)
  },

  filteredCommands: () => {
    const query = command$.searchQuery.get().toLowerCase()
    if (!query) return command$.commands
    const comamnds = command$.commands.get()
    return comamnds.filter(
      (cmd) =>
        cmd.name.toLowerCase().includes(query) ||
        cmd.description?.toLowerCase().includes(query),
    )
  },
})

export const commandPalette$ = observable<CommandPaletteStore>({
  isOpen: false,

  toggle: () => {
    commandPalette$.isOpen.set(!commandPalette$.isOpen)
  },
})

================
File: src/components/ui/button.tsx
================
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import * as React from "react"

import { cn } from "../../utils/cn"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-sm hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-xs hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  },
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/command.tsx
================
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "../../utils/cn"
import { Dialog, DialogContent } from "./dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className,
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg w-[640px]">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[400px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className,
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-hidden data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className,
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className,
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: src/components/ui/dialog.tsx
================
import * as DialogPrimitive from "@radix-ui/react-dialog"
import * as React from "react"

import { cn } from "../../utils/cn"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPrimitive.Portal>
    <DialogPrimitive.Overlay className="fixed inset-0 z-50 bg-black/50" />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 translate-x-[-50%] translate-y-[-50%] rounded-lg border bg-background shadow-lg",
        className,
      )}
      {...props}
    >
      {children}
    </DialogPrimitive.Content>
  </DialogPrimitive.Portal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className,
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className,
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className,
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "../../utils/cn"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-xs transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        ref={ref}
        {...props}
      />
    )
  },
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/resizable.tsx
================
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "../../utils/cn"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className,
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-hidden focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className,
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizableHandle, ResizablePanel, ResizablePanelGroup }

================
File: src/esm-loader/import-module.ts
================
export async function importModule(url: string) {
  try {
    return await import(/* @vite-ignore */ url)
  } catch (error) {
    throw new Error(`Failed to import module: ${url}`)
  }
}

================
File: src/esm-loader/import-types.ts
================
interface ModuleDefinition {
  url: string
  typesUrl?: string
}

async function loadTypes(url: string): Promise<string> {
  const response = await fetch(url)
  return response.text()
}

export class TypeRegistry {
  private typeCache = new Map<string, string>()

  async getTypes(moduleName: string): Promise<string> {
    if (this.typeCache.has(moduleName)) {
      return this.typeCache.get(moduleName)!
    }

    // Try loading from DefinitelyTyped first
    const esmTypesUrl = `https://esm.sh/${moduleName}?types`
    const types = await loadTypes(esmTypesUrl)
    this.typeCache.set(moduleName, types)
    return types
  }
}

async function resolveTypedImports(code: string) {
  const typeRegistry = new TypeRegistry()
  const importRegex =
    /import\s+?(?:(?:(?:[\w*\s{},]*)\s+from\s+?)|)(?:(?:".*?")|(?:'.*?'))[\s]*?(?:;|$)/g
  const imports = code.match(importRegex) || []

  // Collect all type definitions
  const typePromises = imports.map(async (importStatement) => {
    const moduleNameMatch = importStatement.match(/['"]([^'"]+)['"]/)
    if (!moduleNameMatch) return ""
    return typeRegistry.getTypes(moduleNameMatch[1])
  })

  const types = await Promise.all(typePromises)
  const combinedTypes = types.join("\n\n")

  // Create virtual TS environment
  const virtualTsCode = `
    ${combinedTypes}
    
    // Your code
    ${code}
  `

  // Use TypeScript compiler API to check types
  // This is where you'd integrate with the TS compiler
  return virtualTsCode
}

================
File: src/keyboard/use-keyboard-nav.ts
================
import { use$ } from "@legendapp/state/react"
import React from "react"
import { notebook$, setFocusedCell } from "../notebook/notebook-store"

export function useKeyboardNav() {
  const cells = use$(notebook$.cells)
  const focusedCellId = use$(notebook$.focusedCellId)

  const handleKeyDown = React.useCallback(
    (e: KeyboardEvent) => {
      if (e.key === "ArrowUp" && e.ctrlKey) {
        e.preventDefault()
        const currentIndex = cells.findIndex(
          (cell) => cell.id === focusedCellId,
        )
        if (currentIndex > 0) {
          setFocusedCell(cells[currentIndex - 1].id)
        }
      } else if (e.key === "ArrowDown" && e.ctrlKey) {
        e.preventDefault()
        const currentIndex = cells.findIndex(
          (cell) => cell.id === focusedCellId,
        )
        if (currentIndex < cells.length - 1) {
          setFocusedCell(cells[currentIndex + 1].id)
        }
      }
    },
    [cells, focusedCellId],
  )

  React.useEffect(() => {
    document.addEventListener("keydown", handleKeyDown)
    return () => document.removeEventListener("keydown", handleKeyDown)
  }, [handleKeyDown])
}

================
File: src/lib/theme.ts
================
type Theme = "dark" | "light"

export function setTheme(theme: Theme) {
  if (theme === "dark") {
    document.documentElement.classList.add("dark")
    localStorage.setItem("theme", "dark")
  } else {
    document.documentElement.classList.remove("dark")
    localStorage.setItem("theme", "light")
  }
}

export function initializeTheme() {
  // Check if theme is set in localStorage
  const savedTheme = localStorage.getItem("theme") as Theme | null

  // Check system preference
  const systemPrefersDark = window.matchMedia(
    "(prefers-color-scheme: dark)",
  ).matches

  // Apply theme
  if (savedTheme) {
    setTheme(savedTheme)
  } else if (systemPrefersDark) {
    setTheme("dark")
  } else {
    setTheme("light")
  }
}

================
File: src/notebook/code-cell.tsx
================
import { use$ } from "@legendapp/state/react"
import { Play, Trash2 } from "lucide-react"
import type { editor } from "monaco-editor"
import * as monaco from "monaco-editor"
import * as React from "react"
import { memo, useCallback, useRef, useEffect } from "react"
import { CodemirrorEditor } from "../codemirror/codemirror-editor"
import {
  commandPalette$,
  registerGlobalVariable,
} from "../command/command-store"
import { evaluateCode } from "../quickjs"
import {
  Cell as CellType,
  deleteCell,
  notebook$,
  updateCell,
} from "./notebook-store"

interface CodeCellProps {
  cell: CellType
  index: number
  isFocused: boolean
}

function setupKeybindings(editor: editor.IStandaloneCodeEditor) {
  editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyF, () => {}, "")

  monaco.editor.addKeybindingRule({
    keybinding: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyF,
    command: null,
  })

  editor.addCommand(
    monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyK,
    () => {
      commandPalette$.isOpen.set(true)
    },
    "",
  )

  editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyP, () => {}, "")
  editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyJ, () => {}, "")

  monaco.editor.addKeybindingRule({
    keybinding: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyK,
    command: null,
  })
  monaco.editor.addKeybindingRule({
    keybinding: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyP,
    command: null,
  })
  monaco.editor.addKeybindingRule({
    keybinding: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyJ,
    command: null,
  })
}

const ForwardedCodeCell = React.forwardRef<HTMLDivElement, CodeCellProps>(
  ({ cell, isFocused }, ref) => {
    const globals = use$(notebook$.globalObject)
    const editorRef = useRef<editor.IStandaloneCodeEditor | null>(null)
    const containerRef = useRef<HTMLDivElement>(null)

    // Focus management
    useEffect(() => {
      if (isFocused) {
        editorRef.current?.focus()
        containerRef.current?.scrollIntoView({
          behavior: "smooth",
          block: "center",
        })
      }
    }, [isFocused])

    const handleEditorDidMount = useCallback(
      (editor: editor.IStandaloneCodeEditor) => {
        editorRef.current = editor
        setupKeybindings(editor)

        // If this is a newly created cell, focus it
        if (isFocused) {
          setTimeout(() => editor.focus(), 0)
        }
      },
      [isFocused],
    )

    const run = useCallback(
      (code: string) =>
        runCode(code, globals, (result) => {
          updateCell(cell.id, { output: result.output })
          for (const [key, value] of Object.entries(result.output)) {
            registerGlobalVariable(key, value)
          }
        }),
      [cell.id, globals],
    )

    return (
      <div
        ref={ref}
        className="flex px-4 pt-4 gap-2"
        role="region"
        aria-label={`Code cell ${cell.id}`}
      >
        <div className="flex flex-col items-center gap-2">
          <button
            className="text-primary hover:text-primary/80 text-sm border p-2 rounded hover:bg-primary/10"
            onClick={() => run(cell.content)}
            title="Run cell"
            aria-label="Run code in cell"
          >
            <Play className="w-3 h-3" />
          </button>
          <button
            className="text-primary hover:text-primary/80 text-xs border p-2 rounded hover:bg-primary/10"
            onClick={() => deleteCell(cell.id)}
            aria-label="Delete cell"
          >
            <Trash2 className="w-3 h-3" />
          </button>
        </div>
        <div
          ref={containerRef}
          className="border border-border rounded-md overflow-hidden flex-1"
          role="textbox"
          aria-label="Code editor"
        >
          <CodemirrorEditor
            id={cell.id}
            isFocused={isFocused}
            language="typescript"
            value={cell.content}
            onChange={(value) => {
              updateCell(cell.id, { content: value ?? "" })
            }}
            onMount={handleEditorDidMount}
          />

          {cell.output && (
            <div
              className="flex-1 p-2 font-mono text-sm bg-background text-foreground border-t border-gray-200 dark:border-gray-700"
              role="region"
              aria-label="Cell output"
            >
              <pre>{JSON.stringify(cell.output, null, 2)}</pre>
            </div>
          )}
        </div>
      </div>
    )
  },
)

ForwardedCodeCell.displayName = "CodeCell"

export const CodeCell = memo(ForwardedCodeCell)

export async function runCode(
  code: string,
  globals: Record<string, any>,
  onResult: (result: {
    type: "success" | "error"
    output: any
    error: any
  }) => void,
) {
  try {
    const result = await evaluateCode(code, globals)
    if (result.type === "success") {
      onResult({
        type: "success",
        output: result.output,
        error: null,
      })
      let newGlobals: Record<string, any> = {}
      for (const [key, value] of Object.entries(result.output)) {
        newGlobals[key] = value
      }
      onResult({
        type: "success",
        output: newGlobals,
        error: null,
      })
    } else {
      onResult({
        type: "error",
        output: {
          error: result.error,
        },
        error: result.error,
      })
    }
  } catch (error) {
    onResult({
      type: "error",
      output: {
        error: error,
      },
      error: error,
    })
  }
}

================
File: src/notebook/notebook-store.ts
================
import { batch, observable } from "@legendapp/state"
import { ObservablePersistLocalStorage } from "@legendapp/state/persist-plugins/local-storage"
import { syncObservable } from "@legendapp/state/sync"
import { createId } from "@paralleldrive/cuid2"

export interface Cell {
  id: string
  type: "code" | "markdown"
  content: string
  output: Record<string, any>
  executionCount: number | null
  error: string | null
}

interface NotebookState {
  cells: Cell[]
  globalObject: Record<string, any>
  focusedCellId: string | null
}

export const notebook$ = observable<NotebookState>({
  cells: [],
  globalObject: {},
  focusedCellId: null,
})

syncObservable(notebook$, {
  persist: {
    name: "notebook",
    plugin: ObservablePersistLocalStorage,
  },
})

export function setFocusedCell(id: string | null) {
  notebook$.focusedCellId.set(id)
}

export function addCell(type: "code" | "markdown", belowId?: string) {
  batch(() => {
    const newCell: Cell = {
      id: createId(),
      type,
      content: "",
      output: {},
      executionCount: null,
      error: null,
    }

    const cells = notebook$.cells.peek()
    const index = belowId ? cells.findIndex((c) => c.id === belowId) : -1

    if (index === -1) {
      notebook$.cells.push(newCell)
    } else {
      notebook$.cells.splice(index + 1, 0, newCell)
    }

    // Set focus after a short delay to ensure the component is mounted
    setTimeout(() => {
      notebook$.focusedCellId.set(newCell.id)
    }, 0)
  })
}

export function deleteCell(id: string) {
  const cells = notebook$.cells.peek()
  const index = cells.findIndex((c) => c.id === id)
  if (index !== -1) {
    notebook$.cells.splice(index, 1)
  }
  if (notebook$.focusedCellId.peek() === id) {
    notebook$.focusedCellId.set(null)
  }
}

export function updateCellContent(id: string, content: string) {
  const cells = notebook$.cells.peek()
  const cell = cells.findIndex((c) => c.id === id)
  if (cell !== -1) {
    notebook$.cells[cell].content.set(content)
    notebook$.cells[cell].error.set(null)
  }
}

export function updateCellOutput(
  id: string,
  output: string,
  executionCount: number,
) {
  const cells = notebook$.cells.peek()
  const cell = cells.findIndex((c) => c.id === id)
  if (cell !== -1) {
    notebook$.cells[cell].output.set(JSON.parse(output))
    notebook$.cells[cell].executionCount.set(executionCount)
    notebook$.cells[cell].error.set(null)
  }
}

export function setCellError(id: string, error: string) {
  const cells = notebook$.cells.peek()
  const cell = cells.findIndex((c) => c.id === id)
  if (cell !== -1) {
    notebook$.cells[cell].error.set(error)
  }
}

export function selectCell(id: string) {
  notebook$.focusedCellId.set(id)
}

export function moveCellUp(id: string) {
  const cells = notebook$.cells.peek()
  const index = cells.findIndex((c) => c.id === id)
  if (index > 0) {
    const [moved] = notebook$.cells.splice(index, 1)
    notebook$.cells.splice(index - 1, 0, moved)
  }
}

export function moveCellDown(id: string) {
  const cells = notebook$.cells.peek()
  const index = cells.findIndex((c) => c.id === id)
  if (index < cells.length - 1) {
    const [moved] = notebook$.cells.splice(index, 1)
    notebook$.cells.splice(index + 1, 0, moved)
  }
}

export function updateCell(id: string, cell: Partial<Cell>) {
  const index = notebook$.cells.peek().findIndex((c) => c.id === id)
  if (index !== -1) {
    notebook$.cells[index].set({ ...notebook$.cells[index].peek(), ...cell })
  }
}

export function updateGlobalObject(globalObject: Record<string, any>) {
  for (const [key, value] of Object.entries(globalObject)) {
    notebook$.globalObject[key].set(value)
  }
}

export function setGlobalObject(globalObject: Record<string, any>) {
  notebook$.globalObject.set(globalObject)
}

================
File: src/notebook/notebook.tsx
================
import { use$ } from "@legendapp/state/react"
import * as React from "react"
import { CommandPalette } from "../command/command-palette"
import { useKeyboardNav } from "../keyboard/use-keyboard-nav"
import { CodeCell } from "./code-cell"
import { addCell, notebook$ } from "./notebook-store"

export function Notebook() {
  return (
    <div
      className="min-h-screen bg-background text-foreground"
      role="main"
      aria-label="Notebook editor"
    >
      <CommandPalette />
      <TopBar />
      <Editor />
    </div>
  )
}

function TopBar() {
  return (
    <div className="flex items-center justify-between px-2 py-1 border-b border-border">
      <button
        className="p-1 text-muted-foreground hover:text-foreground"
        onClick={() => addCell("code")}
        title="Add cell (⌘K)"
        aria-label="Add new code cell"
      >
        +
      </button>
    </div>
  )
}

function Editor() {
  const cells = use$(notebook$.cells)
  const focusedCellId = use$(notebook$.focusedCellId)
  const cellRefs = React.useRef<Map<string, HTMLDivElement>>(new Map())

  useKeyboardNav()

  return (
    <div
      className="flex flex-col w-full"
      role="list"
      aria-label="Notebook cells"
    >
      {cells.map((cell, index) => (
        <div key={cell.id} role="listitem">
          <CodeCell
            ref={(el) => {
              if (el) {
                cellRefs.current.set(cell.id, el)
              }
            }}
            cell={cell}
            index={index + 1}
            isFocused={focusedCellId === cell.id}
          />
        </div>
      ))}
    </div>
  )
}

================
File: src/runtime/js-executor.ts
================
import type { WorkerResponse } from "./js-worker"

interface ExecutionResult {
  result: unknown
  logs: string[]
}

interface ExecutionError {
  error: string
  logs: string[]
}

export class JavaScriptExecutor {
  private worker: Worker | null = null
  private executionMap = new Map<
    string,
    {
      resolve: (value: ExecutionResult) => void
      reject: (reason: ExecutionError) => void
      timeout: number
    }
  >()

  constructor() {
    this.initializeWorker()
  }

  private initializeWorker() {
    try {
      this.worker = new Worker(
        new URL("../workers/js.worker.ts", import.meta.url),
        { type: "module" },
      )
      this.worker.onmessage = this.handleWorkerMessage.bind(this)
      this.worker.onerror = this.handleWorkerError.bind(this)
    } catch (error) {
      console.error("Failed to initialize worker:", error)
      this.worker = null
    }
  }

  private handleWorkerMessage(event: MessageEvent<WorkerResponse>) {
    const { id, success, result, error, logs } = event.data
    const execution = this.executionMap.get(id)

    if (execution) {
      clearTimeout(execution.timeout)
      this.executionMap.delete(id)

      if (success) {
        execution.resolve({ result, logs })
      } else {
        execution.reject({ error: error ?? "Unknown error", logs })
      }
    }
  }

  private handleWorkerError(error: ErrorEvent) {
    console.error("Worker error:", error)
  }

  execute(code: string, timeoutMs = 50000): Promise<ExecutionResult> {
    if (!this.worker) {
      return Promise.reject({
        error: "Worker not initialized",
        logs: [],
      })
    }

    return new Promise((resolve, reject) => {
      const id = Math.random().toString(36).slice(2)

      const timeout = window.setTimeout(() => {
        this.executionMap.delete(id)
        this.worker?.terminate()
        this.initializeWorker()
        reject({ error: "Execution timed out", logs: [] })
      }, timeoutMs)

      this.executionMap.set(id, { resolve, reject, timeout })
      this.worker?.postMessage({ id, code })
    })
  }

  isAlive(): boolean {
    return this.worker !== null
  }

  terminate() {
    this.worker?.terminate()
    this.worker = null
    this.clearPendingExecutions("Executor terminated")
  }

  private clearPendingExecutions(error: string) {
    for (const [id, execution] of this.executionMap) {
      clearTimeout(execution.timeout)
      execution.reject({ error, logs: [] })
      this.executionMap.delete(id)
    }
  }
}

================
File: src/runtime/js-worker.ts
================
export interface WorkerMessage {
  id: string
  code: string
}

export interface WorkerResponse {
  id: string
  success: boolean
  result?: any
  error?: string
  logs: string[]
}

const context = {
  console: {
    log: (...args: any[]) => {
      const formatted = args
        .map((arg) =>
          typeof arg === "object" ? JSON.stringify(arg, null, 2) : String(arg),
        )
        .join(" ")
      ;(self as any).logs.push(formatted)
    },
    error: (...args: any[]) => {
      const formatted = args
        .map((arg) =>
          typeof arg === "object" ? JSON.stringify(arg, null, 2) : String(arg),
        )
        .join(" ")
      ;(self as any).logs.push(`Error: ${formatted}`)
    },
  },
  fetch: async (url: string) => {
    const response = await self.fetch(url)
    const text = await response.text()
    try {
      return {
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        json: () => JSON.parse(text),
        text: () => text,
      }
    } catch (e) {
      return {
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        text: () => text,
      }
    }
  },
  Math,
  JSON,
}

export type ContextType = typeof context

self.onmessage = async (e: MessageEvent<WorkerMessage>) => {
  const { id, code } = e.data
  ;(self as any).logs = []

  try {
    // Create function with only allowed globals
    const fn = new Function(
      ...Object.keys(context),
      `return (async () => {
        ${code}
      })()`,
    )

    const result = await fn(...Object.values(context))

    const response: WorkerResponse = {
      id,
      success: true,
      result: result ?? (self as any).logs[0], // Fallback to first log if no result
      logs: (self as any).logs,
    }
    self.postMessage(response)
  } catch (error) {
    const response: WorkerResponse = {
      id,
      success: false,
      error: error instanceof Error ? error.message : String(error),
      logs: (self as any).logs,
    }
    self.postMessage(response)
  }
}

================
File: src/utils/cn.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/utils/useDarkMode.ts
================
import { useState, useEffect } from "react"

export type Theme = "light" | "dark"

export function useDarkMode() {
  const [theme, setTheme] = useState<Theme>(
    window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light",
  )

  useEffect(() => {
    if (theme === "dark") {
      document.documentElement.classList.add("dark")
    } else {
      document.documentElement.classList.remove("dark")
    }
  }, [theme])

  useEffect(() => {
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)")
    const handleChange = (e: MediaQueryListEvent) => {
      setTheme(e.matches ? "dark" : "light")
    }
    mediaQuery.addEventListener("change", handleChange)
    return () => mediaQuery.removeEventListener("change", handleChange)
  }, [])

  const toggleTheme = () => {
    setTheme((current) => (current === "dark" ? "light" : "dark"))
  }

  return { theme, toggleTheme }
}

================
File: src/App.tsx
================
import { initializeTheme } from "./lib/theme"
import { Notebook } from "./notebook/notebook"
import { useDarkMode } from "./utils/useDarkMode"

initializeTheme()

function App() {
  useDarkMode()
  return <Notebook />
}

export default App

================
File: src/example.ts
================
import { JavaScriptExecutor } from "./runtime/js-executor"

async function example() {
  const executor = new JavaScriptExecutor()

  try {
    const result1 = await executor.execute(`
      const x = Math.floor(Math.random() * 100);
      console.log('Generated:', x);
      return { x }
    `)
    console.log("Result 1:", result1)

    const result2 = await executor.execute(`
        const lol = Math.random()
        console.log('lol is:', lol)
        return { lol }
    `)
    console.log("Result 2:", result2)

    const pokemonExample = await executor.execute(`
      const name = 'pikachu'
      const pokemon = await fetch('https://pokeapi.co/api/v2/pokemon/' + name)
      const data = await pokemon.json()
      console.log('data is:', data)
      return { data }
    `)
    console.log("Pokemon example:", pokemonExample)

    // const result2 = await executor
    //   .execute(`
    //   console.log('Window is:', window);
    //   console.log('Self is:', self);
    // `)
    //   .catch((err) => err)
    // console.log("Result 2:", result2)

    // const result3 = await executor
    //   .execute(`
    //   while(true) {}
    // `)
    //   .catch((err) => err)
  } finally {
    executor.terminate()
  }
}

================
File: src/index.css
================
@import "tailwindcss";
@plugin 'tailwindcss-animate';

@theme {
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));

  --color-chart-1: hsl(var(--chart-1));
  --color-chart-2: hsl(var(--chart-2));
  --color-chart-3: hsl(var(--chart-3));
  --color-chart-4: hsl(var(--chart-4));
  --color-chart-5: hsl(var(--chart-5));

  --color-sidebar: hsl(var(--sidebar-background));
  --color-sidebar-foreground: hsl(var(--sidebar-foreground));
  --color-sidebar-primary: hsl(var(--sidebar-primary));
  --color-sidebar-primary-foreground: hsl(var(--sidebar-primary-foreground));
  --color-sidebar-accent: hsl(var(--sidebar-accent));
  --color-sidebar-accent-foreground: hsl(var(--sidebar-accent-foreground));
  --color-sidebar-border: hsl(var(--sidebar-border));
  --color-sidebar-ring: hsl(var(--sidebar-ring));

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);

  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;

  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }
  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

@layer utilities {
  body {
    font-family: Arial, Helvetica, sans-serif;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 235 25% 12%;
    --foreground: 228 57% 86%;
    --card: 235 25% 12%;
    --card-foreground: 228 57% 86%;
    --popover: 235 25% 12%;
    --popover-foreground: 228 57% 86%;
    --primary: 228 57% 86%;
    --primary-foreground: 235 25% 12%;
    --secondary: 234 25% 21%;
    --secondary-foreground: 228 57% 86%;
    --muted: 234 25% 21%;
    --muted-foreground: 235 23% 64%;
    --accent: 234 25% 21%;
    --accent-foreground: 228 57% 86%;
    --destructive: 347 76% 72%;
    --destructive-foreground: 228 57% 86%;
    --border: 234 25% 21%;
    --input: 234 25% 21%;
    --ring: 228 57% 86%;
    --chart-1: 228 91% 71%;
    --chart-2: 187 83% 82%;
    --chart-3: 35 85% 65%;
    --chart-4: 261 59% 76%;
    --chart-5: 347 76% 72%;
    --sidebar-background: 230 25% 10%;
    --sidebar-foreground: 228 57% 86%;
    --sidebar-primary: 228 91% 71%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 31% 6%;
    --sidebar-accent-foreground: 228 57% 86%;
    --sidebar-border: 240 31% 6%;
    --sidebar-ring: 228 91% 71%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/main.tsx
================
import { StrictMode } from "react"
import { createRoot } from "react-dom/client"
import App from "./App.tsx"
import "./index.css"

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: src/quickjs.ts
================
import {
  QuickJSContext,
  QuickJSWASMModule,
  getQuickJS,
} from "quickjs-emscripten"

let quickjsInstance: QuickJSWASMModule | null = null
let vm: QuickJSContext | null = null

export async function initQuickJS() {
  if (quickjsInstance && vm) return { quickjsInstance, vm }
  quickjsInstance = await getQuickJS()
  vm = quickjsInstance.newContext()

  return { quickjsInstance, vm }
}

type EvaluationResult =
  | {
      type: "success"
      output: Record<string, any>
    }
  | {
      type: "error"
      error: string
    }

export async function evaluateCode(
  code: string,
  globalObject?: Record<string, any>,
): Promise<EvaluationResult> {
  const { vm } = await initQuickJS()

  if (globalObject) {
    const handles = new Set()
    Object.entries(globalObject).forEach(([key, value]) => {
      const handle = vm.newString(value)
      handles.add(handle)
      vm.setProp(vm.global, key, handle)
    })
  }

  try {
    const result = vm.evalCode(code)

    if (result.error) {
      const errorMessage = vm.dump(result.error)
      result.error.dispose()
      throw new Error(errorMessage)
    }

    const output = vm.dump(result.value)
    result.value.dispose()

    return {
      type: "success",
      output,
    }
  } catch (error) {
    return {
      type: "error",
      error: error instanceof Error ? error.message : "Unknown error",
    }
  }
}

// Handle HMR
if (import.meta.hot) {
  import.meta.hot.dispose(() => {
    if (vm) {
      vm.dispose()
    }
    vm = null
    quickjsInstance = null
  })
}

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .cursorrules
================
Saturn is a Jupyter-like interactive notebook environment for TypeScript, featuring:

* Reactive notebook cells for real-time code execution
* Modern web interface built with React
* Monaco Editor for a powerful code editing experience
* State management powered by Legend App State
* Clean, responsive design using Tailwind CSS

// we need to make sure that only one export per code block is possible

// INSTRUCTION SET FOR BUILDING REACT CODE RUNNER

/*
KEY COMPONENTS NEEDED:

1. Core Module Resolution System
2. Type System Integration 
3. Code Transformation Pipeline
4. Execution Environment
5. Error Handling
*/

// 1. Module Resolution
interface ModuleCache {
  [key: string]: any; 
}

class ModuleResolver {
  private cache: ModuleCache = {}; 

  async resolveModule(specifier: string): Promise<any> {

    if (this.cache[specifier]) return this.cache[specifier];
    
    const esmUrl = `https://esm.sh/${specifier}` ;
    try {
      const module = await import(/* @vite-ignore */ esmUrl);
      this.cache[specifier] = module;
      return module;
    } catch (error) {
      throw new Error( `Failed to load module: ${specifier}` );
    }

  }
}

// 2. Type System 
interface TypeRegistry {
  [key: string]: string; 
}

class TypeLoader {
  private typeCache: TypeRegistry = {}; 

  async loadTypes(module: string): Promise<string> {

    if (this.typeCache[module]) return this.typeCache[module];

    try {
      // Try DefinitelyTyped first
      const dtUrl = `https://cdn.jsdelivr.net/npm/@types/${module}/index.d.ts` ;
      const res = await fetch(dtUrl);
      if (res.ok) {
        const types = await res.text();
        this.typeCache[module] = types;
        return types;
      }

      // Fallback to esm.sh types
      const esmTypesUrl = `https://esm.sh/${module}?types` ;
      const esmRes = await fetch(esmTypesUrl);
      const types = await esmRes.text();
      this.typeCache[module] = types;
      return types;
    } catch (error) {
      throw new Error( `Failed to load types for ${module}` );
    }

  }
}

// 3. Code Transform Pipeline
interface TransformOptions {
  typescript?: boolean; 
  jsx?: boolean; 
}

class CodeTransformer {
  transform(code: string, options: TransformOptions = {}) {

    // Use Sucrase for transformation
    return transform(code, {
      transforms: [
        ...(options.typescript ? ['typescript'] : []),
        ...(options.jsx ? ['jsx'] : []),
        'imports'
      ],
      production: true
    }).code;

  }
}

// 4. Execution Environment
class CodeRunner {
  private moduleResolver: ModuleResolver; 
  private typeLoader: TypeLoader; 
  private transformer: CodeTransformer; 

  constructor() {

    this.moduleResolver = new ModuleResolver();
    this.typeLoader = new TypeLoader();
    this.transformer = new CodeTransformer();

  }

  async execute(code: string, scope = {}) {

    // 1. Extract imports
    const imports = this.extractImports(code);
    
    // 2. Load modules
    const modules = await Promise.all(
      imports.map(imp => this.moduleResolver.resolveModule(imp))
    );

    // 3. Transform code
    const transformed = this.transformer.transform(code, {
      typescript: true,
      jsx: true
    });

    // 4. Execute with scope
    const fn = new Function(...Object.keys(scope), transformed);
    return fn(...Object.values(scope));

  }

  private extractImports(code: string): string[] {

    const importRegex = /import\s+?(?:(?:(?:[\w*\s{},]*)\s+from\s+?)|)(?:(?:".*?")|(?:'.*?'))[\s]*?(?:;|$)/g;
    const matches = code.match(importRegex) || [];
    return matches.map(imp => {
      const [_, module] = imp.match(/['"]([^'"]+)['"]/) || [];
      return module;
    }).filter(Boolean);

  }
}

// USAGE EXAMPLE:

const runner = new CodeRunner(); 

const code = `
import React from 'react'; 
import Select from 'react-select'; 

export default function Demo() {
  const [value, setValue] = React.useState(null); 
  
  return (

    <Select
      value={value}
      onChange={setValue}
      options={[
        { value: 'chocolate', label: 'Chocolate' },
        { value: 'strawberry', label: 'Strawberry' },
        { value: 'vanilla', label: 'Vanilla' }
      ]}
    />

  ); 
}
`; 

// Execute with React in scope
runner.execute(code, { React }).then(result => {
  console.log('Execution complete:', result); 
}).catch(error => {
  console.error('Execution failed:', error); 
});

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: biome.json
================
{
	"$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
	"vcs": {
		"enabled": false,
		"clientKind": "git",
		"useIgnoreFile": false
	},
	"files": {
		"ignoreUnknown": false,
		"ignore": []
	},
	"formatter": {
		"enabled": true,
		"indentStyle": "space"
	},
	"organizeImports": {
		"enabled": true
	},
	"linter": {
		"enabled": true,
		"rules": {
			"recommended": false
		}
	},
	"javascript": {
		"formatter": {
			"quoteStyle": "double",
			"semicolons": "asNeeded"
		}
	}
}

================
File: index.html
================
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image/svg+xml" href="/vite.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Vite + React + TS</title>
</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.tsx"></script>
</body>

</html>

================
File: package.json
================
{
  "name": "saturn-ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "biome check --write .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@codemirror/lang-javascript": "^6.2.2",
    "@legendapp/state": "^3.0.0-beta.26",
    "@locker/near-membrane-dom": "^0.14.0",
    "@paralleldrive/cuid2": "^2.2.2",
    "@radix-ui/react-dialog": "^1.1.6",
    "@uiw/codemirror-extensions-langs": "^4.23.8",
    "@uiw/codemirror-themes-all": "^4.23.8",
    "@uiw/react-codemirror": "^4.23.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.4",
    "idb-keyval": "^6.2.1",
    "immer": "^10.1.1",
    "lucide-react": "^0.474.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-resizable-panels": "^2.1.7",
    "sucrase": "^3.35.0",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "ts-blank-space": "^0.5.1"
  },
  "devDependencies": {
    "@tailwindcss/vite": "^4.0.3",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "@vitejs/plugin-react": "^4.3.4",
    "globals": "^15.14.0",
    "tailwindcss": "^4.0.3",
    "typescript": "~5.7.2",
    "vite": "^6.1.0"
  }
}

================
File: README.md
================
we might need this, but probably not 
https://www.npmjs.com/package/ts-blank-space

react runner
https://claude.ai/chat/5f1c6382-f4ef-4cbb-9130-f2e9303ee79f

https://uiwjs.github.io/react-codemirror/#/extensions/languages

use sucrase instead of babel

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import tailwindcss from "@tailwindcss/vite"
import react from "@vitejs/plugin-react"
import { defineConfig } from "vite"

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  worker: {
    format: "es",
  },
  server: {
    headers: {
      "Cross-Origin-Embedder-Policy": "require-corp",
      "Cross-Origin-Opener-Policy": "same-origin",
    },
    hmr: {
      overlay: false,
    },
    watch: {
      usePolling: false,
    },
  },
  optimizeDeps: {
    exclude: ["quickjs-emscripten"],
  },
  build: {
    target: "esnext",
    minify: "esbuild",
  },
})
