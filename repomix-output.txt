This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-05T21:52:32.147Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  vite.svg
src/
  assets/
    react.svg
  services/
    monaco/
      themes.ts
    monaco.ts
    quickjs.ts
    runtime.ts
  App.tsx
  context.tsx
  index.css
  main.tsx
  quickjs.ts
  vite-env.d.ts
.gitignore
biome.json
index.html
package.json
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/services/monaco/themes.ts
================
import type * as monaco from "@effect/monaco-editor"

export const ChromeDevTools: monaco.editor.IStandaloneThemeData = {
  base: "vs",
  inherit: true,
  rules: [
    {
      background: "FFFFFF",
      token: "",
    },
    {
      foreground: "c41a16",
      token: "string",
    },
    {
      foreground: "1c00cf",
      token: "constant.numeric",
    },
    {
      foreground: "aa0d91",
      token: "keyword",
    },
    {
      foreground: "000000",
      token: "keyword.operator",
    },
    {
      foreground: "aa0d91",
      token: "constant.language",
    },
    {
      foreground: "990000",
      token: "support.class.exception",
    },
    {
      foreground: "000000",
      token: "entity.name.function",
    },
    {
      fontStyle: "bold underline",
      token: "entity.name.type",
    },
    {
      fontStyle: "italic",
      token: "variable.parameter",
    },
    {
      foreground: "007400",
      token: "comment",
    },
    {
      foreground: "ff0000",
      token: "invalid",
    },
    {
      background: "e71a1100",
      token: "invalid.deprecated.trailing-whitespace",
    },
    {
      foreground: "000000",
      background: "fafafafc",
      token: "text source",
    },
    {
      foreground: "aa0d91",
      token: "meta.tag",
    },
    {
      foreground: "aa0d91",
      token: "declaration.tag",
    },
    {
      foreground: "000000",
      fontStyle: "bold",
      token: "support",
    },
    {
      foreground: "aa0d91",
      token: "storage",
    },
    {
      fontStyle: "bold underline",
      token: "entity.name.section",
    },
    {
      foreground: "000000",
      fontStyle: "bold",
      token: "entity.name.function.frame",
    },
    {
      foreground: "333333",
      token: "meta.tag.preprocessor.xml",
    },
    {
      foreground: "994500",
      fontStyle: "italic",
      token: "entity.other.attribute-name",
    },
    {
      foreground: "881280",
      token: "entity.name.tag",
    },
  ],
  colors: {
    "editor.foreground": "#000000",
    "editor.background": "#FFFFFF",
    "editor.selectionBackground": "#BAD6FD",
    "editor.lineHighlightBackground": "#0000001A",
    "editorCursor.foreground": "#000000",
    "editorWhitespace.foreground": "#B3B3B3F4",
  },
}

export const Dracula: monaco.editor.IStandaloneThemeData = {
  base: "vs-dark",
  inherit: true,
  rules: [
    {
      background: "282a36",
      token: "",
    },
    {
      foreground: "6272a4",
      token: "comment",
    },
    {
      foreground: "f1fa8c",
      token: "string",
    },
    {
      foreground: "bd93f9",
      token: "constant.numeric",
    },
    {
      foreground: "bd93f9",
      token: "constant.language",
    },
    {
      foreground: "bd93f9",
      token: "constant.character",
    },
    {
      foreground: "bd93f9",
      token: "constant.other",
    },
    {
      foreground: "ffb86c",
      token: "variable.other.readwrite.instance",
    },
    {
      foreground: "ff79c6",
      token: "constant.character.escaped",
    },
    {
      foreground: "ff79c6",
      token: "constant.character.escape",
    },
    {
      foreground: "ff79c6",
      token: "string source",
    },
    {
      foreground: "ff79c6",
      token: "string source.ruby",
    },
    {
      foreground: "ff79c6",
      token: "keyword",
    },
    {
      foreground: "ff79c6",
      token: "storage",
    },
    {
      foreground: "8be9fd",
      fontStyle: "italic",
      token: "storage.type",
    },
    {
      foreground: "50fa7b",
      fontStyle: "underline",
      token: "entity.name.class",
    },
    {
      foreground: "50fa7b",
      fontStyle: "italic underline",
      token: "entity.other.inherited-class",
    },
    {
      foreground: "50fa7b",
      token: "entity.name.function",
    },
    {
      foreground: "ffb86c",
      fontStyle: "italic",
      token: "variable.parameter",
    },
    {
      foreground: "ff79c6",
      token: "entity.name.tag",
    },
    {
      foreground: "50fa7b",
      token: "entity.other.attribute-name",
    },
    {
      foreground: "8be9fd",
      token: "support.function",
    },
    {
      foreground: "6be5fd",
      token: "support.constant",
    },
    {
      foreground: "66d9ef",
      fontStyle: " italic",
      token: "support.type",
    },
    {
      foreground: "66d9ef",
      fontStyle: " italic",
      token: "support.class",
    },
    {
      foreground: "f8f8f0",
      background: "ff79c6",
      token: "invalid",
    },
    {
      foreground: "f8f8f0",
      background: "bd93f9",
      token: "invalid.deprecated",
    },
    {
      foreground: "cfcfc2",
      token: "meta.structure.dictionary.json string.quoted.double.json",
    },
    {
      foreground: "6272a4",
      token: "meta.diff",
    },
    {
      foreground: "6272a4",
      token: "meta.diff.header",
    },
    {
      foreground: "ff79c6",
      token: "markup.deleted",
    },
    {
      foreground: "50fa7b",
      token: "markup.inserted",
    },
    {
      foreground: "e6db74",
      token: "markup.changed",
    },
    {
      foreground: "bd93f9",
      token: "constant.numeric.line-number.find-in-files - match",
    },
    {
      foreground: "e6db74",
      token: "entity.name.filename",
    },
    {
      foreground: "f83333",
      token: "message.error",
    },
    {
      foreground: "eeeeee",
      token:
        "punctuation.definition.string.begin.json - meta.structure.dictionary.value.json",
    },
    {
      foreground: "eeeeee",
      token:
        "punctuation.definition.string.end.json - meta.structure.dictionary.value.json",
    },
    {
      foreground: "8be9fd",
      token: "meta.structure.dictionary.json string.quoted.double.json",
    },
    {
      foreground: "f1fa8c",
      token: "meta.structure.dictionary.value.json string.quoted.double.json",
    },
    {
      foreground: "50fa7b",
      token:
        "meta meta meta meta meta meta meta.structure.dictionary.value string",
    },
    {
      foreground: "ffb86c",
      token: "meta meta meta meta meta meta.structure.dictionary.value string",
    },
    {
      foreground: "ff79c6",
      token: "meta meta meta meta meta.structure.dictionary.value string",
    },
    {
      foreground: "bd93f9",
      token: "meta meta meta meta.structure.dictionary.value string",
    },
    {
      foreground: "50fa7b",
      token: "meta meta meta.structure.dictionary.value string",
    },
    {
      foreground: "ffb86c",
      token: "meta meta.structure.dictionary.value string",
    },
  ],
  colors: {
    "editor.foreground": "#f8f8f2",
    "editor.background": "#17181c",
    "editor.selectionBackground": "#44475a",
    "editorCursor.foreground": "#f8f8f0",
    "editorWhitespace.foreground": "#3B3A32",
    "editorIndentGuide.activeBackground": "#9D550FB0",
    "editor.selectionHighlightBorder": "#222218",
  },
}

================
File: src/services/monaco.ts
================
import * as monaco from "@effect/monaco-editor"
import * as Effect from "effect/Effect"
import * as Stream from "effect/Stream"
import type ts from "typescript"
import { ChromeDevTools, Dracula } from "./monaco/themes"

type MonacoApi = typeof import("@effect/monaco-editor")

export class Monaco extends Effect.Service<Monaco>()("app/Monaco", {
  scoped: Effect.gen(function* () {
    monaco.languages.typescript.typescriptDefaults.setEagerModelSync(true)

    monaco.languages.typescript.typescriptDefaults.setCompilerOptions({
      allowNonTsExtensions: true,
      exactOptionalPropertyTypes: true,
      module: 199 as any, // ts.ModuleKind.NodeNext
      moduleResolution: 99 as any, // ts.ModuleResolutionKind.ESNext
      strict: true,
      target: 99, // ts.ScriptTarget.ESNext
    })

    monaco.editor.defineTheme("chrome-devtools", ChromeDevTools)
    monaco.editor.defineTheme("dracula", Dracula)

    setupCompletionItemProviders(monaco)
    setupTwoslashIntegration(monaco)

    /**
     * Creates a new Monaco editor and attaches it to the specified HTML
     * element.
     *
     * The editor will be disposed when the associated scope is closed.
     */
    function createEditor(element: HTMLElement) {
      return Effect.gen(function* () {
        const viewStates = new Map<
          string,
          monaco.editor.ICodeEditorViewState | null
        >()

        /**
         * The editor that was created.
         */
        const editor = yield* Effect.acquireRelease(
          Effect.sync(() =>
            monaco.editor.create(element, {
              automaticLayout: true,
              fixedOverflowWidgets: true,
              fontSize: 16,
              minimap: { enabled: false },
              quickSuggestions: {
                comments: false,
                other: true,
                strings: true,
              },
              scrollBeyondLastLine: false,
            }),
          ),
          (editor) => Effect.sync(() => editor.dispose()),
        )

        /**
         * Loads the specified model into the editor.
         */
        function loadModel(model: monaco.editor.ITextModel) {
          return Effect.sync(() => {
            const current = editor.getModel()
            // If the current model matches the model to load, there is no further
            // work to do and we can return the model directly
            if (current !== null && current === model) {
              return model
            }
            // Otherwise, handle the editor view state
            if (current !== null) {
              // Make sure to save the view state for the outgoing model
              viewStates.set(current.uri.fsPath, editor.saveViewState())
            }
            editor.setModel(model)
            const fsPath = model.uri.fsPath
            if (viewStates.has(fsPath)) {
              // Make sure to restore the view state for the incoming model
              editor.restoreViewState(viewStates.get(fsPath)!)
            }
            return model
          })
        }

        /**
         * A stream of changes made to the content of the editor's currently
         * loaded model.
         */
        const content = Stream.async<string>((emit) => {
          const disposable = editor.onDidChangeModelContent(() => {
            emit.single(editor.getValue())
          })
          return Effect.sync(() => disposable.dispose())
        })

        return {
          editor,
          loadModel,
          content,
        } as const
      })
    }

    return {
      createEditor,
    } as const
  }),
}) {}

function setupCompletionItemProviders(monaco: MonacoApi) {
  const previousRegistrationProvider =
    monaco.languages.registerCompletionItemProvider

  monaco.languages.registerCompletionItemProvider = function (
    language: monaco.languages.LanguageSelector,
    provider: monaco.languages.CompletionItemProvider,
  ): monaco.IDisposable {
    // If the model's language is not TypeScript, there is no need to use the
    // custom completion item provider
    if (language !== "typescript") {
      return previousRegistrationProvider(language, provider)
    }

    // Implementation adapted from https://github.com/microsoft/monaco-editor/blob/a845ff6b278c76183a9cf969260fc3e1396b2b0b/src/language/typescript/languageFeatures.ts#L435
    async function provideCompletionItems(
      this: monaco.languages.CompletionItemProvider,
      model: monaco.editor.ITextModel,
      position: monaco.Position,
      _context: monaco.languages.CompletionContext,
      _token: monaco.CancellationToken,
    ) {
      // Hack required for converting a `ts.TextChange` to a `ts.TextEdit` - see
      // toTextEdit function defined below
      ;(this as any).__model = model

      const wordInfo = model.getWordUntilPosition(position)
      const wordRange = new monaco.Range(
        position.lineNumber,
        wordInfo.startColumn,
        position.lineNumber,
        wordInfo.endColumn,
      )
      const resource = model.uri
      const offset = model.getOffsetAt(position)

      const worker = await (this as any)._worker(resource)

      if (model.isDisposed()) {
        return
      }

      const info: ts.CompletionInfo | undefined =
        await worker.getCompletionsAtPosition(resource.toString(), offset, {})

      if (!info || model.isDisposed()) {
        return
      }

      const suggestions = info.entries
        .filter(pruneNodeBuiltIns)
        .map((entry) => {
          let range = wordRange
          if (entry.replacementSpan) {
            const p1 = model.getPositionAt(entry.replacementSpan.start)
            const p2 = model.getPositionAt(
              entry.replacementSpan.start + entry.replacementSpan.length,
            )
            range = new monaco.Range(
              p1.lineNumber,
              p1.column,
              p2.lineNumber,
              p2.column,
            )
          }

          const tags: Array<monaco.languages.CompletionItemTag> = []
          if (entry.kindModifiers?.indexOf("deprecated") !== -1) {
            tags.push(monaco.languages.CompletionItemTag.Deprecated)
          }

          return {
            uri: resource,
            position,
            offset,
            range,
            label: entry.name,
            insertText: entry.name,
            sortText: entry.sortText,
            kind: (this.constructor as any).convertKind(entry.kind),
            tags,
            data: entry.data,
            hasAction: entry.hasAction,
            source: entry.source,
          }
        })

      return { suggestions }
    }

    interface CustomCompletionItem extends monaco.languages.CompletionItem {
      readonly label: string
      readonly uri: monaco.Uri
      readonly position: monaco.Position
      readonly offset: number
      readonly source: string | undefined
      readonly data?: ts.CompletionEntryData | undefined
    }

    async function resolveCompletionItem(
      this: monaco.languages.CompletionItemProvider,
      item: CustomCompletionItem,
      _token: monaco.CancellationToken,
    ) {
      const worker = await (this as any)._worker(item.uri)

      const details: ts.CompletionEntryDetails | undefined =
        await worker.getCompletionEntryDetails(
          item.uri.toString(),
          item.offset,
          item.label,
          {},
          item.source,
          {},
          item.data,
        )

      if (!details) {
        return item
      }

      const autoImports = getAutoImports(this, details)

      return {
        uri: item.uri,
        position: item.position,
        label: details.name,
        kind: (this.constructor as any).convertKind(details.kind),
        detail:
          autoImports?.detailText || displayPartsToString(details.displayParts),
        additionalTextEdits: autoImports?.textEdits,
        documentation: {
          value: (this.constructor as any).createDocumentationString(details),
        },
      } as CustomCompletionItem
    }

    return previousRegistrationProvider(language, {
      triggerCharacters: [".", '"', "'", "`", "/", "@", "<", "#", " "],
      provideCompletionItems: provideCompletionItems.bind(provider),
      resolveCompletionItem: resolveCompletionItem.bind(provider),
    })
  }
}

function displayPartsToString(
  displayParts: Array<ts.SymbolDisplayPart> | undefined,
): string {
  if (displayParts) {
    return displayParts.map((displayPart) => displayPart.text).join("")
  }
  return ""
}

interface AutoImport {
  readonly detailText: string
  readonly textEdits: ReadonlyArray<monaco.languages.TextEdit>
}

function getAutoImports(
  provider: monaco.languages.CompletionItemProvider,
  details: ts.CompletionEntryDetails,
): AutoImport | undefined {
  const codeAction = details.codeActions?.[0]
  if (!codeAction) {
    return
  }

  const textChanges = codeAction.changes[0]?.textChanges ?? []

  // If the newly entered text does not start with `import ...`, then it will be
  // potentially added to an existing import and can most likely be accepted
  // without modification
  if (
    textChanges.every((textChange: any) => !/import/.test(textChange.newText))
  ) {
    const specifier = codeAction.description.match(/from ["'](.+)["']/)![1]
    return {
      detailText: `Auto import from '${specifier}'`,
      textEdits: textChanges.map((textChange) =>
        toTextEdit(provider, textChange),
      ),
    }
  }

  if (details.kind === "interface" || details.kind === "type") {
    const specifier = codeAction.description.match(
      /from module ["'](.+)["']/,
    )![1]
    return {
      detailText: `Auto import from '${specifier}'`,
      textEdits: textChanges.map((textChange) =>
        toTextEdit(provider, {
          ...textChange,
          // Make type-related **new** imports safe since the resolved specifier
          // might be internal and we don't have an easy way to remap it to a
          // more public one that we actually allow when we load the code at
          // runtime. This should work out of the box with `isolatedModules: true`
          // but for some reason it does not
          newText: textChange.newText.replace(/import/, "import type"),
        }),
      ),
    }
  }

  return {
    detailText: codeAction.description,
    textEdits: textChanges.map((textChange: any) =>
      toTextEdit(provider, textChange),
    ),
  }
}

function toTextEdit(
  provider: monaco.languages.CompletionItemProvider,
  textChange: ts.TextChange,
): monaco.languages.TextEdit {
  return {
    // If there is no existing import in the file then a new import has to be
    // created. In such situations, TypeScript may fail to compute the proper
    // module specifier for this "node_module" because it exits its
    // `tryGetModuleNameAsNodeModule` when it doesn't have fs layer installed:
    // https://github.com/microsoft/TypeScript/blob/328e888a9d0a11952f4ff949848d4336bce91b18/src/compiler/moduleSpecifiers.ts#L553.
    // It then generates a relative path which we just hack around here
    text: textChange.newText,
    range: (provider as any)._textSpanToRange(
      (provider as any).__model,
      textChange.span,
    ),
  }
}

// in node repl:
// > require("module").builtinModules
const builtInNodeModules = [
  "assert",
  "assert/strict",
  "async_hooks",
  "buffer",
  "child_process",
  "cluster",
  "console",
  "constants",
  "crypto",
  "dgram",
  "diagnostics_channel",
  "dns",
  "dns/promises",
  "domain",
  "events",
  "fs",
  "fs/promises",
  "http",
  "http2",
  "https",
  "inspector",
  "module",
  "net",
  "os",
  "path",
  "path/posix",
  "path/win32",
  "perf_hooks",
  "process",
  "punycode",
  "querystring",
  "readline",
  "readline/promises",
  "repl",
  "stream",
  "stream/consumers",
  "stream/promises",
  "stream/web",
  "string_decoder",
  "sys",
  "timers",
  "timers/promises",
  "tls",
  "trace_events",
  "tty",
  "url",
  "util",
  "util/types",
  "v8",
  "vm",
  "wasi",
  "worker_threads",
  "zlib",
]

function pruneNodeBuiltIns(entry: ts.CompletionEntry): boolean {
  return !builtInNodeModules.includes(entry.name)
}

/** Strongly-typed RegExp groups (https://github.com/microsoft/TypeScript/issues/32098#issuecomment-1279645368) */
type RegExpGroups<T extends string> = IterableIterator<RegExpMatchArray> &
  Array<{ groups: Record<T, string> | Record<string, string> }>

interface LineInfo {
  readonly model: monaco.editor.ITextModel
  readonly position: monaco.Position
  readonly lineLength: number
}

function setupTwoslashIntegration(monaco: MonacoApi) {
  monaco.languages.registerInlayHintsProvider(
    [
      { language: "javascript" },
      { language: "typescript" },
      { language: "typescriptreact" },
      { language: "javascriptreact" },
    ],
    {
      displayName: "twoslash",
      provideInlayHints: async (model, _, cancellationToken) => {
        const text = model.getValue()
        const queryRegex = /^\s*\/\/\.?\s*\^\?/gm
        const inlineQueryRegex = /^[^\S\r\n]*(?<start>\S).*\/\/\s*(?<end>=>)/gm
        const results: Array<monaco.languages.InlayHint> = []

        const worker = await monaco.languages.typescript
          .getTypeScriptWorker()
          .then((worker) => worker(model.uri))

        if (model.isDisposed()) {
          return {
            hints: [],
            dispose: () => {},
          }
        }

        const matches = text.matchAll(
          inlineQueryRegex,
        ) as unknown as RegExpGroups<"start" | "end">

        for (const _match of matches) {
          if (_match.index === undefined) {
            break
          }

          if (cancellationToken.isCancellationRequested) {
            return {
              hints: [],
              dispose: () => {},
            }
          }
          const [line] = _match
          const { start, end: querySymbol } = _match.groups

          const offset = 0

          const startIndex = line.indexOf(start)
          const startPos = model.getPositionAt(
            startIndex + offset + _match.index,
          )
          const endIndex = line.lastIndexOf(querySymbol) + 2
          const endPos = model.getPositionAt(endIndex + offset + _match.index)

          const quickInfo = await getLeftMostQuickInfoOfLine(worker, {
            model,
            position: startPos,
            lineLength: endIndex - startIndex - 2,
          })

          if (!quickInfo || !quickInfo.displayParts) {
            continue
          }
          results.push(
            createHint({
              displayParts: quickInfo.displayParts,
              monaco,
              position: endPos,
            }),
          )
        }

        let match

        while ((match = queryRegex.exec(text)) !== null) {
          const end = match.index + match[0].length - 1
          const endPos = model.getPositionAt(end)
          const inspectionPos = new monaco.Position(
            endPos.lineNumber - 1,
            endPos.column,
          )
          const inspectionOff = model.getOffsetAt(inspectionPos)

          if (cancellationToken.isCancellationRequested) {
            return {
              hints: [],
              dispose: () => {},
            }
          }

          const quickInfo: ts.QuickInfo | undefined =
            await worker.getQuickInfoAtPosition(
              "file://" + model.uri.path,
              inspectionOff,
            )

          if (!quickInfo || !quickInfo.displayParts) {
            continue
          }

          results.push(
            createHint({
              displayParts: quickInfo.displayParts,
              monaco,
              position: endPos,
            }),
          )
        }
        return {
          hints: results,
          dispose: () => {},
        }
      },
    },
  )
}

function createHint(options: {
  displayParts: ts.SymbolDisplayPart[]
  position: monaco.Position
  monaco: MonacoApi
}): monaco.languages.InlayHint {
  const { displayParts, position, monaco } = options
  let text = displayParts
    .map((d) => d.text)
    .join("")
    .replace(/\\n/g, " ")
    .replace(/\/n/g, " ")
    .replace(/  /g, " ")
    .replace(/[\u0000-\u001F\u007F-\u009F]/g, "")

  return {
    kind: monaco.languages.InlayHintKind.Type,
    position: new monaco.Position(position.lineNumber, position.column + 1),
    label: text,
    paddingLeft: true,
  }
}

const range = (num: number) => [...Array(num).keys()]

async function getLeftMostQuickInfoOfLine(
  worker: monaco.languages.typescript.TypeScriptWorker,
  { model, position, lineLength }: LineInfo,
): Promise<ts.QuickInfo | undefined> {
  const offset = model.getOffsetAt(position)
  for (const i of range(lineLength)) {
    const quickInfo: ts.QuickInfo | undefined =
      await worker.getQuickInfoAtPosition(
        "file://" + model.uri.path,
        i + offset,
      )

    if (!quickInfo || !quickInfo.displayParts) {
      continue
    }

    return quickInfo
  }

  return Promise.resolve(undefined)
}

================
File: src/services/quickjs.ts
================
import { Data, Effect, GlobalValue } from "effect"
import { getQuickJS } from "quickjs-emscripten"

const semaphore = GlobalValue.globalValue("app/QuickJS/semaphore", () =>
  Effect.unsafeMakeSemaphore(1),
)

class ExecError extends Data.TaggedError("ExecError")<{
  readonly error: any
}> {}

export class QuickJS extends Effect.Service<QuickJS>()("app/QuickJS", {
  accessors: true,
  scoped: Effect.gen(function* () {
    // only one instance of quickjs can be created at a time
    yield* Effect.acquireRelease(semaphore.take(1), () => semaphore.release(1))

    const quickjs = yield* Effect.promise(() => getQuickJS())

    const vm = yield* Effect.acquireRelease(
      Effect.sync(() => quickjs.newContext()),
      (vm) =>
        Effect.sync(() => {
          vm.dispose()
        }),
    )

    const evalCode = (code: string) =>
      Effect.sync(() => vm.evalCode(code)).pipe(
        Effect.flatMap((result) =>
          Effect.gen(function* () {
            if (result.error) {
              return yield* Effect.fail(new ExecError({ error: result.error }))
            }

            try {
              // Get the raw value first
              const value = vm.dump(result.value)
              return yield* Effect.succeed(value)
            } finally {
              if (result.value?.alive) {
                result.value.dispose()
              }
            }
          }),
        ),
      )

    return { vm, evalCode }
  }),
}) {}

================
File: src/services/runtime.ts
================
import { Rx } from "@effect-rx/rx-react"
import * as FetchHttpClient from "@effect/platform/FetchHttpClient"
import { Effect } from "effect"
import * as Layer from "effect/Layer"
import { QuickJS } from "./quickjs"

export const runtime = Rx.runtime(
  Layer.mergeAll(FetchHttpClient.layer, QuickJS.Default),
)

export const saturnHandleRx = Rx.family(
  ({ initialCode }: { initialCode: string }) =>
    runtime.rx((ctx) =>
      Effect.gen(function* () {
        const quickjs = yield* QuickJS

        const initialOutput = yield* quickjs.evalCode(initialCode)

        const output = Rx.writable<any, any>(
          () => initialOutput,
          (ctx, value: string) => ctx.setSelf(value),
        )

        const evalCode = Rx.fn((code: string) =>
          Effect.gen(function* () {
            const result = yield* quickjs.evalCode(code)
            console.log(result)
            yield* ctx.set(output, result)
            return result
          }),
        )

        return {
          output,
          evalCode,
        } as const
      }),
    ),
)

export interface RxSaturnHandle
  extends Rx.Rx.InferSuccess<ReturnType<typeof saturnHandleRx>> {}

================
File: src/App.tsx
================
import { useRxSet } from "@effect-rx/rx-react"
import { Suspense, useState } from "react"
import { SaturnProvider, useOutput, useSaturn } from "./context"

function Editor() {
  const saturn = useSaturn()
  const output = useOutput()
  const evalCode = useRxSet(saturn.evalCode)

  const [code, setCode] = useState("{ a: 1, b: 2 }")

  return (
    <div className="p-5">
      <h1>QuickJS Playground</h1>
      <textarea
        value={code}
        onChange={(e) => setCode(e.target.value)}
        className="w-full h-[200px] font-mono mb-2.5"
      />
      <div>
        <button
          onClick={() => evalCode(code)}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Run Code
        </button>
      </div>
      <div className="mt-5 p-2.5 bg-gray-100 rounded font-mono">
        <pre>Output: {JSON.stringify(output, null, 2)}</pre>
      </div>
    </div>
  )
}

function App() {
  return (
    <Suspense>
      <SaturnProvider initialCode={"5"}>
        <Editor />
      </SaturnProvider>
    </Suspense>
  )
}

export default App

================
File: src/context.tsx
================
import { useRxSuspenseSuccess, useRxValue } from "@effect-rx/rx-react"
import { createContext, useContext } from "react"
import { RxSaturnHandle, saturnHandleRx } from "./services/runtime"

export const SaturnContext = createContext<RxSaturnHandle>(null as any)

export function SaturnProvider({
  children,
  initialCode,
}: React.PropsWithChildren<{
  initialCode: string
}>) {
  const { value } = useRxSuspenseSuccess(saturnHandleRx({ initialCode }))
  return (
    <SaturnContext.Provider value={value}>{children}</SaturnContext.Provider>
  )
}

export const useSaturn = () => {
  const value = useContext(SaturnContext)
  if (!value) {
    throw new Error("SaturnContext not found")
  }
  return value
}

export const useOutput = () => {
  const saturn = useSaturn()
  const output = useRxValue(saturn.output)
  console.log("Current output value:", output) // Debug log
  return output
}

================
File: src/index.css
================
@import "tailwindcss";

================
File: src/main.tsx
================
import { StrictMode } from "react"
import { createRoot } from "react-dom/client"
import App from "./App.tsx"
import "./index.css"

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: src/quickjs.ts
================
import { getQuickJS, QuickJSContext } from "quickjs-emscripten"

let quickJSInstance: Awaited<ReturnType<typeof getQuickJS>> | null = null
let vmInstance: QuickJSContext | null = null

export async function getQuickJSInstance() {
  if (!quickJSInstance) {
    console.log("create quickjs instance")
    quickJSInstance = await getQuickJS()
  }
  return quickJSInstance
}

export function getVM(): QuickJSContext {
  if (!vmInstance && quickJSInstance) {
    vmInstance = quickJSInstance.newContext()
  }
  if (!vmInstance) {
    throw new Error("VM not initialized")
  }
  return vmInstance
}

export function disposeVM() {
  if (vmInstance) {
    vmInstance.dispose()
    vmInstance = null
  }
}

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: biome.json
================
{
	"$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
	"vcs": {
		"enabled": false,
		"clientKind": "git",
		"useIgnoreFile": false
	},
	"files": {
		"ignoreUnknown": false,
		"ignore": []
	},
	"formatter": {
		"enabled": true,
		"indentStyle": "space"
	},
	"organizeImports": {
		"enabled": true
	},
	"linter": {
		"enabled": true,
		"rules": {
			"recommended": false
		}
	},
	"javascript": {
		"formatter": {
			"quoteStyle": "double",
			"semicolons": "asNeeded"
		}
	}
}

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "saturn-ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "biome check --write .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@effect-rx/rx-react": "^0.31.8",
    "@effect/monaco-editor": "^0.0.2",
    "@effect/platform": "^0.75.3",
    "@effect/platform-browser": "^0.54.3",
    "effect": "^3.12.9",
    "quickjs-emscripten": "^0.31.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@tailwindcss/vite": "^4.0.3",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "@vitejs/plugin-react": "^4.3.4",
    "globals": "^15.14.0",
    "tailwindcss": "^4.0.3",
    "typescript": "~5.7.2",
    "vite": "^6.1.0"
  }
}

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import tailwindcss from "@tailwindcss/vite"
import react from "@vitejs/plugin-react"
import { defineConfig } from "vite"

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  worker: {
    format: "es",
  },
  server: {
    headers: {
      "Cross-Origin-Embedder-Policy": "require-corp",
      "Cross-Origin-Opener-Policy": "same-origin",
    },
    hmr: {
      overlay: false,
    },
    watch: {
      usePolling: false,
    },
  },
  optimizeDeps: {
    exclude: ["quickjs-emscripten"],
  },
  build: {
    target: "esnext",
    minify: "esbuild",
  },
})
